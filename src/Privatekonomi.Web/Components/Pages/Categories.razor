@page "/categories"
@rendermode InteractiveServer
@inject ICategoryService CategoryService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Kategorier - Privatekonomi</PageTitle>

<div class="d-flex justify-space-between align-center mb-4">
    <MudText Typo="Typo.h4">
        <MudIcon Icon="@Icons.Material.Filled.Label" Color="Color.Primary" Class="mr-2" aria-hidden="true" />
        Kategorier
    </MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateDialog">
        Ny Kategori
    </MudButton>
</div>

<MudPaper Class="pa-4">
    @if (_loading)
    {
        <div class="d-flex flex-column align-center pa-6">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">Laddar kategorier...</MudText>
        </div>
    }
    else
    {
        @* Main Categories *@
        @foreach (var category in _mainCategories)
        {
            <MudCard Elevation="2" Class="mb-3">
                <MudCardContent>
                    <div class="d-flex justify-space-between align-center mb-2">
                        <div class="d-flex align-center gap-2">
                            <MudChip T="string" Style="@($"background-color: {category.Color}; color: white;")" Size="Size.Large">
                                @if (!string.IsNullOrWhiteSpace(category.AccountNumber))
                                {
                                    <text>@category.AccountNumber - @category.Name</text>
                                }
                                else
                                {
                                    <text>@category.Name</text>
                                }
                            </MudChip>
                            @if (category.IsSystemCategory)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Info">Systemkategori</MudChip>
                            }
                        </div>
                        <div class="d-flex gap-1">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                         Color="Color.Primary" 
                                         Size="Size.Small"
                                         OnClick="@(() => OpenEditDialog(category))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                         Color="Color.Success" 
                                         Size="Size.Small"
                                         title="Lägg till underkategori"
                                         OnClick="@(() => OpenCreateSubcategoryDialog(category))" />
                            @if (category.IsSystemCategory)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.RestartAlt" 
                                             Color="Color.Warning" 
                                             Size="Size.Small"
                                             title="Återställ till standard"
                                             OnClick="@(() => ResetSystemCategory(category))" />
                            }
                            @if (!category.IsSystemCategory)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                             Color="Color.Error" 
                                             Size="Size.Small"
                                             OnClick="@(() => DeleteCategory(category))" />
                            }
                        </div>
                    </div>
                    
                    @* Subcategories *@
                    @if (category.SubCategories.Any())
                    {
                        <MudDivider Class="my-2" />
                        <div class="d-flex flex-wrap gap-2 mt-2">
                            @foreach (var subCategory in category.SubCategories)
                            {
                                <div class="d-flex align-center gap-1">
                                    <MudChip T="string" 
                                            Style="@($"background-color: {subCategory.Color}; color: white;")" 
                                            Size="Size.Small">
                                        @if (!string.IsNullOrWhiteSpace(subCategory.AccountNumber))
                                        {
                                            <text>@subCategory.AccountNumber - @subCategory.Name</text>
                                        }
                                        else
                                        {
                                            <text>@subCategory.Name</text>
                                        }
                                    </MudChip>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                 Color="Color.Primary" 
                                                 Size="Size.Small"
                                                 OnClick="@(() => OpenEditDialog(subCategory))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                 Color="Color.Error" 
                                                 Size="Size.Small"
                                                 OnClick="@(() => DeleteCategory(subCategory))" />
                                </div>
                            }
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        }
        
        @if (!_mainCategories.Any())
        {
            <MudText>Inga kategorier tillgängliga.</MudText>
        }
    }
</MudPaper>

@code {
    private bool _loading = true;
    private IEnumerable<Category> _mainCategories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        var allCategories = await CategoryService.GetAllCategoriesAsync();
        _mainCategories = allCategories.Where(c => c.ParentId == null).OrderBy(c => c.Name);
        _loading = false;
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters<CategoryEditDialog>
        {
            { x => x.Category, null },
            { x => x.IsCreate, true }
        };
        
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CategoryEditDialog>("Skapa Ny Kategori", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OpenEditDialog(Category category)
    {
        var parameters = new DialogParameters<CategoryEditDialog>
        {
            { x => x.Category, category },
            { x => x.IsCreate, false }
        };
        
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CategoryEditDialog>("Redigera Kategori", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OpenCreateSubcategoryDialog(Category parentCategory)
    {
        var parameters = new DialogParameters<CategoryEditDialog>
        {
            { x => x.Category, null },
            { x => x.IsCreate, true },
            { x => x.ParentCategory, parentCategory }
        };
        
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CategoryEditDialog>("Skapa Underkategori", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task ResetSystemCategory(Category category)
    {
        var result = await DialogService.ShowMessageBox(
            "Återställ Systemkategori",
            $"Är du säker på att du vill återställa kategorin '{category.Name}' till sitt ursprungliga värde?",
            yesText: "Återställ", cancelText: "Avbryt");

        if (result == true)
        {
            try
            {
                await CategoryService.ResetSystemCategoryAsync(category.CategoryId);
                Snackbar.Add("Kategori återställd!", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Fel vid återställning av kategori: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteCategory(Category category)
    {
        var result = await DialogService.ShowMessageBox(
            "Bekräfta borttagning",
            $"Är du säker på att du vill ta bort kategorin '{category.Name}'?",
            yesText: "Ta bort", cancelText: "Avbryt");

        if (result == true)
        {
            try
            {
                await CategoryService.DeleteCategoryAsync(category.CategoryId);
                Snackbar.Add("Kategori borttagen!", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Fel vid borttagning av kategori: {ex.Message}", Severity.Error);
            }
        }
    }
}
