@page "/lifetimeline"
@rendermode InteractiveServer
@inject ILifeTimelinePlannerService TimelinePlannerService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Livslinjeplanering - Privatekonomi</PageTitle>

<div class="d-flex justify-space-between align-center mb-4">
    <div>
        <MudText Typo="Typo.h4">üóìÔ∏è Livslinjeplanering</MudText>
        <MudText Typo="Typo.body2" Color="Color.Secondary">L√•ngsiktig ekonomisk planering √∂ver hela livet</MudText>
    </div>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleMilestoneForm">
        Ny Milstolpe
    </MudButton>
</div>

@if (_loading)
{
    <div class="d-flex flex-column align-center pa-6">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">Laddar livslinjeplanering...</MudText>
    </div>
}
else
{
    <!-- Scenario Selection -->
    <MudPaper Class="pa-4 mb-4">
        <div class="d-flex justify-space-between align-center mb-3">
            <MudText Typo="Typo.h6">Scenarioplanering</MudText>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="ToggleScenarioForm">
                Nytt Scenario
            </MudButton>
        </div>
        
        @if (_scenarios.Any())
        {
            <MudSelect @bind-Value="_selectedScenarioId" Label="Aktivt Scenario" Variant="Variant.Outlined" T="int?" @onchange="OnScenarioChanged">
                @foreach (var scenario in _scenarios)
                {
                    <MudSelectItem Value="@((int?)scenario.LifeTimelineScenarioId)">
                        @scenario.Name @(scenario.IsActive ? " (Aktiv)" : "")
                    </MudSelectItem>
                }
            </MudSelect>
            
            @if (_activeScenario != null)
            {
                <MudGrid Class="mt-4">
                    <MudItem xs="12" md="2">
                        <MudCard Elevation="2" Class="pa-3">
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">M√•nadssparande</MudText>
                                <MudText Typo="Typo.h6">@_activeScenario.MonthlySavings.ToString("N0") kr</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="2">
                        <MudCard Elevation="2" Class="pa-3">
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">F√∂rv√§ntad avkastning</MudText>
                                <MudText Typo="Typo.h6">@_activeScenario.ExpectedReturnRate.ToString("F1")%</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="2">
                        <MudCard Elevation="2" Class="pa-3">
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Pensions√•lder</MudText>
                                <MudText Typo="Typo.h6">@_activeScenario.RetirementAge √•r</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudCard Elevation="2" Class="pa-3">
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Prognos pension</MudText>
                                <MudText Typo="Typo.h6" Color="Color.Success">@_projectedWealth.ToString("N0") kr</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudCard Elevation="2" Class="pa-3">
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">M√•natlig pension</MudText>
                                <MudText Typo="Typo.h6" Color="Color.Info">@_monthlyPension.ToString("N0") kr</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            }
        }
        else
        {
            <MudAlert Severity="Severity.Info">Skapa ett scenario f√∂r att b√∂rja din livslinjeplanering</MudAlert>
        }
    </MudPaper>

    <!-- Milestone Creation Form -->
    @if (_showMilestoneForm)
    {
        <MudPaper Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">@(_editingMilestone != null ? "Redigera Milstolpe" : "L√§gg till Ny Milstolpe")</MudText>
            
            <MudTextField @bind-Value="_formMilestone.Name" 
                          Label="Namn" 
                          Variant="Variant.Outlined"
                          Required="true"
                          MaxLength="200"
                          Class="mb-3" />
            
            <MudTextField @bind-Value="_formMilestone.Description" 
                          Label="Beskrivning" 
                          Variant="Variant.Outlined"
                          Lines="2"
                          MaxLength="500"
                          Class="mb-3" />

            <MudSelect @bind-Value="_formMilestone.MilestoneType" Label="Typ av milstolpe" Variant="Variant.Outlined" Class="mb-3">
                <MudSelectItem Value="@("HousePurchase")">K√∂pa bostad</MudSelectItem>
                <MudSelectItem Value="@("Child")">Barn</MudSelectItem>
                <MudSelectItem Value="@("Retirement")">Pension</MudSelectItem>
                <MudSelectItem Value="@("Education")">Utbildning</MudSelectItem>
                <MudSelectItem Value="@("Career")">Karri√§rbyte</MudSelectItem>
                <MudSelectItem Value="@("Other")">Annat</MudSelectItem>
            </MudSelect>

            <MudDatePicker @bind-Date="_formMilestonePlannedDate"
                           Label="Planerat datum"
                           Variant="Variant.Outlined"
                           Class="mb-3" />

            <MudNumericField @bind-Value="_formMilestone.EstimatedCost" 
                             Label="Ber√§knad kostnad (kr)" 
                             Variant="Variant.Outlined"
                             Format="N0"
                             Culture="@(new System.Globalization.CultureInfo("sv-SE"))"
                             Class="mb-3" />

            <MudNumericField @bind-Value="_formMilestone.CurrentSavings" 
                             Label="Redan sparat (kr)" 
                             Variant="Variant.Outlined"
                             Min="0"
                             Format="N0"
                             Culture="@(new System.Globalization.CultureInfo("sv-SE"))"
                             Class="mb-3" />

            <MudSelect @bind-Value="_formMilestone.Priority" Label="Prioritet" Variant="Variant.Outlined" Class="mb-3">
                <MudSelectItem Value="1">1 - H√∂gst</MudSelectItem>
                <MudSelectItem Value="2">2 - H√∂g</MudSelectItem>
                <MudSelectItem Value="3">3 - Normal</MudSelectItem>
                <MudSelectItem Value="4">4 - L√•g</MudSelectItem>
                <MudSelectItem Value="5">5 - L√§gst</MudSelectItem>
            </MudSelect>

            <div class="d-flex gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveMilestone">
                    @(_editingMilestone != null ? "Uppdatera" : "L√§gg till")
                </MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="CancelMilestoneForm">Avbryt</MudButton>
            </div>
        </MudPaper>
    }

    <!-- Scenario Creation Form -->
    @if (_showScenarioForm)
    {
        <MudPaper Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">Skapa Nytt Scenario</MudText>
            
            <MudTextField @bind-Value="_formScenario.Name" 
                          Label="Scenarionamn" 
                          Variant="Variant.Outlined"
                          Required="true"
                          MaxLength="200"
                          Class="mb-3" />
            
            <MudTextField @bind-Value="_formScenario.Description" 
                          Label="Beskrivning" 
                          Variant="Variant.Outlined"
                          Lines="2"
                          MaxLength="500"
                          Class="mb-3" />

            <MudNumericField @bind-Value="_formScenario.MonthlySavings" 
                             Label="M√•nadssparande (kr)" 
                             Variant="Variant.Outlined"
                             Min="0"
                             Format="N0"
                             Culture="@(new System.Globalization.CultureInfo("sv-SE"))"
                             Class="mb-3" />

            <MudNumericField @bind-Value="_formScenario.ExpectedReturnRate" 
                             Label="F√∂rv√§ntad √•rsavkastning (%)" 
                             Variant="Variant.Outlined"
                             Min="0"
                             Max="20"
                             Format="F1"
                             Culture="@(new System.Globalization.CultureInfo("sv-SE"))"
                             Class="mb-3" />

            <MudNumericField @bind-Value="_formScenario.RetirementAge" 
                             Label="Pensions√•lder" 
                             Variant="Variant.Outlined"
                             Min="55"
                             Max="75"
                             Class="mb-3" />

            <MudNumericField @bind-Value="_formScenario.InflationRate" 
                             Label="Inflationstakt (%)" 
                             Variant="Variant.Outlined"
                             Min="0"
                             Max="10"
                             Format="F1"
                             Culture="@(new System.Globalization.CultureInfo("sv-SE"))"
                             Class="mb-3" />

            <div class="d-flex gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveScenario">
                    Skapa Scenario
                </MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="CancelScenarioForm">Avbryt</MudButton>
            </div>
        </MudPaper>
    }

    <!-- Life Insurance and Inheritance Planning -->
    @if (_activeScenario != null)
    {
        <MudPaper Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-4">üíº Livf√∂rs√§kring & Arv</MudText>
            
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudCardContent>
                            <div class="d-flex align-center gap-2 mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.Security" Color="Color.Primary" />
                                <MudText Typo="Typo.h6">Livf√∂rs√§kringsbehov</MudText>
                            </div>
                            
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                Ber√§knat utifr√•n framtida utgifter och inkomstbortfall vid h√§ndelse av d√∂dsfall.
                            </MudText>
                            
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Ber√§knat behov</MudText>
                                    <MudText Typo="Typo.h5" Color="Color.Warning">@_lifeInsuranceNeed.ToString("N0") kr</MudText>
                                </MudItem>
                                <MudItem xs="12" Class="mt-2">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Rekommenderat f√∂rs√§kringsbelopp</MudText>
                                    <MudText Typo="Typo.h5" Color="Color.Info">@_recommendedLifeInsurance.ToString("N0") kr</MudText>
                                </MudItem>
                            </MudGrid>
                            
                            <MudAlert Severity="Severity.Info" Class="mt-4" Dense="true">
                                Ber√§kningen baseras p√• DIME-metoden: Skulder + Inkomstbortfall + Bostadskostnader + Utbildningskostnader
                            </MudAlert>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudCardContent>
                            <div class="d-flex align-center gap-2 mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.CardGiftcard" Color="Color.Secondary" />
                                <MudText Typo="Typo.h6">Arv & G√•vor</MudText>
                            </div>
                            
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                Planera f√∂r arv och g√•vor som del av din l√•ngsiktiga ekonomiska strategi.
                            </MudText>
                            
                            <MudText Typo="Typo.body2" Class="mb-2">
                                <strong>Tips f√∂r arvs- och g√•voplanering:</strong>
                            </MudText>
                            <ul class="mud-typography-body2 mb-2">
                                <li>Utnyttja g√•voskattefria gr√§nser √•rligen</li>
                                <li>√ñverv√§g testamente f√∂r att s√§kerst√§lla √∂nskad f√∂rdelning</li>
                                <li>T√§nk p√• skattekonsekvenser vid arv av tillg√•ngar</li>
                                <li>√ñverv√§g generationsskifte i god tid</li>
                            </ul>
                            
                            <MudAlert Severity="Severity.Normal" Class="mt-4" Dense="true">
                                L√§gg till milstolpar av typen "Other" f√∂r planerade g√•vor eller f√∂rv√§ntade arv
                            </MudAlert>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }

    <!-- Timeline Visualization -->
    @if (_milestones.Any())
    {
        <MudPaper Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-4">Tidslinjen</MudText>
            
            <div class="timeline-container">
                @foreach (var milestone in _milestones.OrderBy(m => m.PlannedDate))
                {
                    var yearsAway = (milestone.PlannedDate - DateTime.Now).Days / 365.25;
                    var progressPct = milestone.CurrentSavings > 0 && milestone.EstimatedCost > 0 
                        ? (double)(milestone.CurrentSavings / milestone.EstimatedCost * 100) 
                        : 0;

                    <MudCard Class="mb-3" Elevation="2">
                        <MudCardContent>
                            <div class="d-flex justify-space-between align-center">
                                <div class="flex-grow-1">
                                    <div class="d-flex align-center gap-2">
                                        <MudIcon Icon="@GetMilestoneIcon(milestone.MilestoneType)" Color="@GetMilestoneColor(milestone.MilestoneType)" />
                                        <MudText Typo="Typo.h6">@milestone.Name</MudText>
                                        <MudChip T="string" Size="Size.Small" Color="@GetPriorityColor(milestone.Priority)">
                                            Prioritet @milestone.Priority
                                        </MudChip>
                                        @if (milestone.IsCompleted)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Success">Genomf√∂rd</MudChip>
                                        }
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(milestone.Description))
                                    {
                                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-1">@milestone.Description</MudText>
                                    }
                                    
                                    <div class="d-flex gap-4 mt-2">
                                        <div>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Datum</MudText>
                                            <MudText Typo="Typo.body2">@milestone.PlannedDate.ToString("yyyy-MM-dd") (@yearsAway.ToString("F1") √•r)</MudText>
                                        </div>
                                        <div>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Kostnad</MudText>
                                            <MudText Typo="Typo.body2">@milestone.EstimatedCost.ToString("N0") kr</MudText>
                                        </div>
                                        <div>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Sparat</MudText>
                                            <MudText Typo="Typo.body2">@milestone.CurrentSavings.ToString("N0") kr</MudText>
                                        </div>
                                        @if (milestone.RequiredMonthlySavings.HasValue && milestone.RequiredMonthlySavings.Value > 0)
                                        {
                                            <div>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">Kr√§ver/m√•nad</MudText>
                                                <MudText Typo="Typo.body2">@milestone.RequiredMonthlySavings.Value.ToString("N0") kr</MudText>
                                            </div>
                                        }
                                    </div>
                                    
                                    <div class="mt-2">
                                        <MudProgressLinear Color="@GetProgressColor(progressPct)" 
                                                           Rounded="true" 
                                                           Size="Size.Medium" 
                                                           Value="@progressPct" />
                                        <MudText Typo="Typo.caption" Class="mt-1">Framsteg: @progressPct.ToString("F0")%</MudText>
                                    </div>
                                </div>
                                
                                <div class="d-flex flex-column gap-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditMilestone(milestone))" Color="Color.Primary" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteMilestone(milestone.LifeTimelineMilestoneId))" Color="Color.Error" />
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                }
            </div>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="pa-6 mt-4" Elevation="0" Style="text-align: center;">
            <MudIcon Icon="@Icons.Material.Filled.Timeline" Size="Size.Large" Color="Color.Secondary" Class="mb-4" Style="font-size: 4rem;" />
            <MudText Typo="Typo.h6" Class="mb-2">Inga milstolpar √§n</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                Skapa milstolpar f√∂r att planera din ekonomiska framtid. L√§gg till viktiga h√§ndelser som k√∂p av bostad, barn, eller pension.
            </MudText>
        </MudPaper>
    }
}

@code {
    private IEnumerable<LifeTimelineMilestone> _milestones = new List<LifeTimelineMilestone>();
    private IEnumerable<LifeTimelineScenario> _scenarios = new List<LifeTimelineScenario>();
    private LifeTimelineScenario? _activeScenario;
    private bool _loading = true;
    private bool _showMilestoneForm = false;
    private bool _showScenarioForm = false;
    private LifeTimelineMilestone _formMilestone = new();
    private DateTime? _formMilestonePlannedDate;
    private LifeTimelineMilestone? _editingMilestone;
    private LifeTimelineScenario _formScenario = new();
    private decimal _projectedWealth;
    private decimal _monthlyPension;
    private decimal _lifeInsuranceNeed;
    private decimal _recommendedLifeInsurance;
    private int? _selectedScenarioId;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await LoadMilestones();
        await LoadScenarios();
        _loading = false;
    }

    private async Task LoadMilestones()
    {
        _milestones = await TimelinePlannerService.GetAllMilestonesAsync();
        
        // Calculate required monthly savings for each milestone
        foreach (var milestone in _milestones)
        {
            if (!milestone.IsCompleted && milestone.PlannedDate > DateTime.Now)
            {
                milestone.RequiredMonthlySavings = await TimelinePlannerService.CalculateRequiredMonthlySavingsAsync(milestone.LifeTimelineMilestoneId);
            }
        }
    }

    private async Task LoadScenarios()
    {
        _scenarios = await TimelinePlannerService.GetAllScenariosAsync();
        _activeScenario = await TimelinePlannerService.GetActiveScenarioAsync();
        
        if (_activeScenario != null)
        {
            _selectedScenarioId = _activeScenario.LifeTimelineScenarioId;
            _projectedWealth = await TimelinePlannerService.CalculateProjectedRetirementWealthAsync(_activeScenario.LifeTimelineScenarioId);
            _monthlyPension = await TimelinePlannerService.CalculateExpectedMonthlyPensionAsync(_activeScenario.LifeTimelineScenarioId);
            _lifeInsuranceNeed = await TimelinePlannerService.CalculateLifeInsuranceNeedAsync();
            _recommendedLifeInsurance = await TimelinePlannerService.CalculateRecommendedLifeInsuranceAsync();
        }
    }

    private void ToggleMilestoneForm()
    {
        _showMilestoneForm = !_showMilestoneForm;
        if (_showMilestoneForm)
        {
            _formMilestone = new LifeTimelineMilestone 
            { 
                Priority = 3, 
                CurrentSavings = 0,
                MilestoneType = "Other"
            };
            _formMilestonePlannedDate = DateTime.Now.AddYears(1);
            _editingMilestone = null;
        }
    }

    private void ToggleScenarioForm()
    {
        _showScenarioForm = !_showScenarioForm;
        if (_showScenarioForm)
        {
            _formScenario = new LifeTimelineScenario
            {
                RetirementAge = 65,
                ExpectedReturnRate = 7.0m,
                InflationRate = 2.0m,
                SalaryIncreaseRate = 2.5m,
                MonthlySavings = 4500m
            };
        }
    }

    private void EditMilestone(LifeTimelineMilestone milestone)
    {
        _editingMilestone = milestone;
        _formMilestone = new LifeTimelineMilestone
        {
            LifeTimelineMilestoneId = milestone.LifeTimelineMilestoneId,
            Name = milestone.Name,
            Description = milestone.Description,
            MilestoneType = milestone.MilestoneType,
            EstimatedCost = milestone.EstimatedCost,
            CurrentSavings = milestone.CurrentSavings,
            Priority = milestone.Priority,
            IsCompleted = milestone.IsCompleted,
            Notes = milestone.Notes,
            UserId = milestone.UserId
        };
        _formMilestonePlannedDate = milestone.PlannedDate;
        _showMilestoneForm = true;
    }

    private async Task SaveMilestone()
    {
        try
        {
            if (_formMilestonePlannedDate.HasValue)
            {
                _formMilestone.PlannedDate = _formMilestonePlannedDate.Value;
            }

            if (_editingMilestone != null)
            {
                await TimelinePlannerService.UpdateMilestoneAsync(_formMilestone);
                Snackbar.Add("Milstolpen har uppdaterats!", Severity.Success);
            }
            else
            {
                await TimelinePlannerService.CreateMilestoneAsync(_formMilestone);
                Snackbar.Add("Milstolpen har lagts till!", Severity.Success);
            }

            await LoadMilestones();
            CancelMilestoneForm();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ett fel uppstod: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveScenario()
    {
        try
        {
            // If no scenarios exist yet, make this the active one
            if (!_scenarios.Any())
            {
                _formScenario.IsActive = true;
            }

            await TimelinePlannerService.CreateScenarioAsync(_formScenario);
            Snackbar.Add("Scenariot har skapats!", Severity.Success);

            await LoadScenarios();
            CancelScenarioForm();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ett fel uppstod: {ex.Message}", Severity.Error);
        }
    }

    private void CancelMilestoneForm()
    {
        _showMilestoneForm = false;
        _formMilestone = new();
        _formMilestonePlannedDate = null;
        _editingMilestone = null;
    }

    private void CancelScenarioForm()
    {
        _showScenarioForm = false;
        _formScenario = new();
    }

    private async Task OnScenarioChanged()
    {
        if (_selectedScenarioId.HasValue)
        {
            await TimelinePlannerService.SetActiveScenarioAsync(_selectedScenarioId.Value);
            await LoadScenarios();
        }
    }

    private async Task DeleteMilestone(int milestoneId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Bekr√§fta borttagning",
            "√Ñr du s√§ker p√• att du vill ta bort denna milstolpe?",
            yesText: "Ja", cancelText: "Avbryt");

        if (result == true)
        {
            await TimelinePlannerService.DeleteMilestoneAsync(milestoneId);
            Snackbar.Add("Milstolpen har tagits bort", Severity.Info);
            await LoadMilestones();
        }
    }

    private string GetMilestoneIcon(string type) => type switch
    {
        "HousePurchase" => Icons.Material.Filled.Home,
        "Child" => Icons.Material.Filled.ChildCare,
        "Retirement" => Icons.Material.Filled.Elderly,
        "Education" => Icons.Material.Filled.School,
        "Career" => Icons.Material.Filled.Work,
        _ => Icons.Material.Filled.Flag
    };

    private Color GetMilestoneColor(string type) => type switch
    {
        "HousePurchase" => Color.Primary,
        "Child" => Color.Secondary,
        "Retirement" => Color.Success,
        "Education" => Color.Info,
        "Career" => Color.Warning,
        _ => Color.Default
    };

    private Color GetPriorityColor(int priority) => priority switch
    {
        1 => Color.Error,
        2 => Color.Warning,
        3 => Color.Primary,
        4 => Color.Info,
        5 => Color.Default,
        _ => Color.Default
    };

    private Color GetProgressColor(double progress)
    {
        if (progress >= 100) return Color.Success;
        if (progress >= 75) return Color.Info;
        if (progress >= 50) return Color.Primary;
        if (progress >= 25) return Color.Warning;
        return Color.Error;
    }
}
