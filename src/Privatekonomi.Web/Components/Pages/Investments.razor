@page "/investments"
@rendermode InteractiveServer
@inject IInvestmentService InvestmentService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Aktier & Fonder - Privatekonomi</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Aktier & Fonder</MudText>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <!-- Summary Cards -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6" lg="3">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Totalt Värde</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Info">@_totalValue.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Total Kostnad</MudText>
                    <MudText Typo="Typo.h4">@_totalCost.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Vinst/Förlust</MudText>
                    <MudText Typo="Typo.h4" Color="@(_totalProfitLoss >= 0 ? Color.Success : Color.Error)">
                        @(_totalProfitLoss >= 0 ? "+" : "")@_totalProfitLoss.ToString("C", new System.Globalization.CultureInfo("sv-SE"))
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Avkastning</MudText>
                    <MudText Typo="Typo.h4" Color="@(_totalProfitLossPercentage >= 0 ? Color.Success : Color.Error)">
                        @(_totalProfitLossPercentage >= 0 ? "+" : "")@_totalProfitLossPercentage.ToString("F2")%
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Investments Table -->
    <MudPaper Class="pa-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h6">Mina Investeringar</MudText>
                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudDownload" 
                               OnClick="ExportToCSV" Disabled="!_investments.Any()">
                        Exportera CSV
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Upload" 
                               Href="/import-investments">
                        Importera
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
                               OnClick="OpenAddDialog">
                        Lägg till
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>

        @if (!_investments.Any())
        {
            <MudText>Inga investeringar ännu. Lägg till din första aktie eller fond!</MudText>
        }
        else
        {
            <MudTable Items="@_filteredInvestments" Hover="true" Striped="true" Filter="new Func<Investment,bool>(FilterFunc)">
                <ToolBarContent>
                    <MudTextField @bind-Value="_searchString" Placeholder="Sök" Adornment="Adornment.Start" 
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudSpacer />
                    <MudSelect T="int?" @bind-Value="_filterBankId" Label="Bank" Clearable="true" 
                               Variant="Variant.Outlined" Margin="Margin.Dense" Class="ml-2" Style="min-width: 150px;">
                        @foreach (var bank in _banks)
                        {
                            <MudSelectItem Value="@((int?)bank.BankSourceId)">@bank.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="string" @bind-Value="_filterAccount" Label="Konto" Clearable="true" 
                               Variant="Variant.Outlined" Margin="Margin.Dense" Class="ml-2" Style="min-width: 150px;">
                        @foreach (var account in _accounts)
                        {
                            <MudSelectItem Value="@account">@account</MudSelectItem>
                        }
                    </MudSelect>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Namn</MudTh>
                    <MudTh>Typ</MudTh>
                    <MudTh>Bank</MudTh>
                    <MudTh>Konto</MudTh>
                    <MudTh Style="text-align: right">Antal</MudTh>
                    <MudTh Style="text-align: right">Köpkurs</MudTh>
                    <MudTh Style="text-align: right">Aktuell kurs</MudTh>
                    <MudTh Style="text-align: right">Värde</MudTh>
                    <MudTh Style="text-align: right">Vinst/Förlust</MudTh>
                    <MudTh Style="text-align: right">%</MudTh>
                    <MudTh>Åtgärder</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Namn">
                        <div>
                            <MudText Typo="Typo.body2">@context.Name</MudText>
                            @if (!string.IsNullOrEmpty(context.ShortName))
                            {
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@context.ShortName</MudText>
                            }
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Typ">
                        <MudChip T="string" Size="Size.Small" Color="@GetTypeColor(context.Type)">
                            @context.Type
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Bank">
                        @if (context.BankSource != null)
                        {
                            <MudChip T="string" Size="Size.Small" Style="@($"background-color: {context.BankSource.Color}; color: white;")">
                                @context.BankSource.Name
                            </MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Konto">
                        @if (!string.IsNullOrEmpty(context.AccountNumber))
                        {
                            <MudText Typo="Typo.body2">@context.AccountNumber</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Antal" Style="text-align: right">@context.Quantity.ToString("N2")</MudTd>
                    <MudTd DataLabel="Köpkurs" Style="text-align: right">@context.PurchasePrice.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudTd>
                    <MudTd DataLabel="Aktuell kurs" Style="text-align: right">@context.CurrentPrice.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudTd>
                    <MudTd DataLabel="Värde" Style="text-align: right">@context.TotalValue.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudTd>
                    <MudTd DataLabel="Vinst/Förlust" Style="text-align: right">
                        <MudText Color="@(context.ProfitLoss >= 0 ? Color.Success : Color.Error)">
                            @(context.ProfitLoss >= 0 ? "+" : "")@context.ProfitLoss.ToString("C", new System.Globalization.CultureInfo("sv-SE"))
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="%" Style="text-align: right">
                        <MudText Color="@(context.ProfitLossPercentage >= 0 ? Color.Success : Color.Error)">
                            @(context.ProfitLossPercentage >= 0 ? "+" : "")@context.ProfitLossPercentage.ToString("F2")%
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Åtgärder">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" Size="Size.Small"
                                       OnClick="@(() => OpenEditDialog(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                       OnClick="@(() => DeleteInvestment(context.InvestmentId))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
}

@inject IBankSourceService BankSourceService
@inject IJSRuntime JS
@using System.Text

@code {
    private bool _loading = true;
    private IEnumerable<Investment> _investments = new List<Investment>();
    private IEnumerable<Investment> _filteredInvestments = new List<Investment>();
    private List<BankSource> _banks = new();
    private List<string> _accounts = new();
    private string _searchString = "";
    private int? _filterBankId = null;
    private string? _filterAccount = null;
    
    private decimal _totalValue = 0;
    private decimal _totalCost = 0;
    private decimal _totalProfitLoss = 0;
    private decimal _totalProfitLossPercentage = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        _investments = await InvestmentService.GetAllInvestmentsAsync();
        _banks = (await BankSourceService.GetAllBankSourcesAsync()).ToList();
        _accounts = _investments
            .Where(i => !string.IsNullOrEmpty(i.AccountNumber))
            .Select(i => i.AccountNumber!)
            .Distinct()
            .OrderBy(a => a)
            .ToList();
        
        ApplyFilters();
        CalculateTotals();
        _loading = false;
    }

    private void ApplyFilters()
    {
        _filteredInvestments = _investments;
        
        if (_filterBankId.HasValue)
        {
            _filteredInvestments = _filteredInvestments.Where(i => i.BankSourceId == _filterBankId.Value);
        }
        
        if (!string.IsNullOrEmpty(_filterAccount))
        {
            _filteredInvestments = _filteredInvestments.Where(i => i.AccountNumber == _filterAccount);
        }
        
        CalculateTotals();
        StateHasChanged();
    }

    private void CalculateTotals()
    {
        _totalValue = _filteredInvestments.Sum(i => i.TotalValue);
        _totalCost = _filteredInvestments.Sum(i => i.TotalCost);
        _totalProfitLoss = _totalValue - _totalCost;
        _totalProfitLossPercentage = _totalCost > 0 ? (_totalProfitLoss / _totalCost) * 100 : 0;
    }

    private bool FilterFunc(Investment investment)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (investment.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (investment.Type.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (investment.ShortName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (investment.BankSource?.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (investment.AccountNumber?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        return false;
    }

    private Color GetTypeColor(string type)
    {
        return type switch
        {
            "Aktie" => Color.Primary,
            "Fond" => Color.Secondary,
            "Certifikat" => Color.Warning,
            _ => Color.Default
        };
    }

    private async Task ExportToCSV()
    {
        try
        {
            var csvContent = await InvestmentService.ExportToCsvAsync(_filteredInvestments);
            var bytes = Encoding.UTF8.GetBytes(csvContent);
            var base64 = Convert.ToBase64String(bytes);
            var fileName = $"investeringar_{DateTime.Now:yyyyMMdd}.csv";
            
            await JS.InvokeVoidAsync("downloadFile", fileName, "text/csv", base64);
            Snackbar.Add("Export slutförd!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ett fel uppstod vid export: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenAddDialog()
    {
        var parameters = new DialogParameters<InvestmentDialog>
        {
            { x => x.Investment, new Investment { PurchaseDate = DateTime.Now, LastUpdated = DateTime.Now } }
        };

        var dialog = await DialogService.ShowAsync<InvestmentDialog>("Lägg till investering", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Investment investment)
        {
            await InvestmentService.AddInvestmentAsync(investment);
            Snackbar.Add("Investering tillagd", Severity.Success);
            await LoadData();
        }
    }

    private async Task OpenEditDialog(Investment investment)
    {
        var parameters = new DialogParameters<InvestmentDialog>
        {
            { x => x.Investment, new Investment
                {
                    InvestmentId = investment.InvestmentId,
                    Name = investment.Name,
                    Type = investment.Type,
                    Quantity = investment.Quantity,
                    PurchasePrice = investment.PurchasePrice,
                    CurrentPrice = investment.CurrentPrice,
                    PurchaseDate = investment.PurchaseDate,
                    LastUpdated = investment.LastUpdated
                }
            },
            { x => x.IsEdit, true }
        };

        var dialog = await DialogService.ShowAsync<InvestmentDialog>("Redigera investering", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Investment updatedInvestment)
        {
            await InvestmentService.UpdateInvestmentAsync(updatedInvestment);
            Snackbar.Add("Investering uppdaterad", Severity.Success);
            await LoadData();
        }
    }

    private async Task DeleteInvestment(int id)
    {
        var result = await DialogService.ShowMessageBox(
            "Bekräfta borttagning",
            "Är du säker på att du vill ta bort denna investering?",
            yesText: "Ja", cancelText: "Avbryt");

        if (result == true)
        {
            await InvestmentService.DeleteInvestmentAsync(id);
            Snackbar.Add("Investering borttagen", Severity.Success);
            await LoadData();
        }
    }
}
