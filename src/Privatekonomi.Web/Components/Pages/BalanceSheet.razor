@page "/balancesheet"
@rendermode InteractiveServer
@inject IAssetService AssetService
@inject IInvestmentService InvestmentService
@inject IBankSourceService BankSourceService
@inject ILoanService LoanService
@inject ITransactionService TransactionService

<PageTitle>Balansräkning - Privatekonomi</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Balansräkning</MudText>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <!-- Net Worth Summary -->
    <MudPaper Class="pa-4 mb-4" Elevation="3">
        <MudGrid>
            <MudItem xs="12" Class="text-center">
                <MudText Typo="Typo.h6" Color="Color.Secondary">Nettoförmögenhet</MudText>
                <MudText Typo="Typo.h3" Color="@(_netWorth >= 0 ? Color.Success : Color.Error)" Class="font-weight-bold">
                    @_netWorth.ToString("C0", new System.Globalization.CultureInfo("sv-SE"))
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2">
                    Tillgångar: @_totalAssets.ToString("C0", new System.Globalization.CultureInfo("sv-SE")) | 
                    Skulder: @_totalLiabilities.ToString("C0", new System.Globalization.CultureInfo("sv-SE"))
                </MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudGrid>
        <!-- Assets Column -->
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h5" Class="mb-3" Color="Color.Success">
                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" /> Tillgångar
            </MudText>

            <!-- Bank Accounts -->
            <MudPaper Class="pa-4 mb-3">
                <MudText Typo="Typo.h6" Class="mb-2">Bankkonton</MudText>
                <MudDivider Class="mb-2" />
                @if (_bankAccounts.Any())
                {
                    @foreach (var account in _bankAccounts)
                    {
                        <div class="d-flex justify-space-between mb-2">
                            <MudText>@account.Name</MudText>
                            <MudText>@account.CurrentBalance.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                        </div>
                    }
                    <MudDivider Class="my-2" />
                    <div class="d-flex justify-space-between">
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">Totalt:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@_totalBankBalance.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Inga bankkonton registrerade</MudText>
                }
            </MudPaper>

            <!-- Investments -->
            <MudPaper Class="pa-4 mb-3">
                <MudText Typo="Typo.h6" Class="mb-2">Investeringar</MudText>
                <MudDivider Class="mb-2" />
                @if (_investments.Any())
                {
                    @foreach (var investment in _investments.Take(5))
                    {
                        <div class="d-flex justify-space-between mb-2">
                            <MudText>@investment.Name</MudText>
                            <MudText>@investment.TotalValue.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                        </div>
                    }
                    @if (_investments.Count() > 5)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">... och @(_investments.Count() - 5) fler</MudText>
                    }
                    <MudDivider Class="my-2" />
                    <div class="d-flex justify-space-between">
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">Totalt:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@_totalInvestmentValue.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Inga investeringar registrerade</MudText>
                }
            </MudPaper>

            <!-- Physical Assets -->
            <MudPaper Class="pa-4 mb-3">
                <MudText Typo="Typo.h6" Class="mb-2">Fysiska Tillgångar</MudText>
                <MudDivider Class="mb-2" />
                @if (_assets.Any())
                {
                    @foreach (var asset in _assets.Take(5))
                    {
                        <div class="d-flex justify-space-between mb-2">
                            <MudText>@asset.Name (@asset.Type)</MudText>
                            <MudText>@asset.CurrentValue.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                        </div>
                    }
                    @if (_assets.Count() > 5)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">... och @(_assets.Count() - 5) fler</MudText>
                    }
                    <MudDivider Class="my-2" />
                    <div class="d-flex justify-space-between">
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">Totalt:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@_totalAssetValue.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Inga fysiska tillgångar registrerade</MudText>
                }
            </MudPaper>

            <!-- Total Assets -->
            <MudPaper Class="pa-4" Elevation="3">
                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.h6" Color="Color.Success">Totala Tillgångar:</MudText>
                    <MudText Typo="Typo.h6" Color="Color.Success" Class="font-weight-bold">
                        @_totalAssets.ToString("C0", new System.Globalization.CultureInfo("sv-SE"))
                    </MudText>
                </div>
            </MudPaper>
        </MudItem>

        <!-- Liabilities Column -->
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h5" Class="mb-3" Color="Color.Error">
                <MudIcon Icon="@Icons.Material.Filled.TrendingDown" /> Skulder
            </MudText>

            <!-- Loans -->
            <MudPaper Class="pa-4 mb-3">
                <MudText Typo="Typo.h6" Class="mb-2">Lån & Krediter</MudText>
                <MudDivider Class="mb-2" />
                @if (_loans.Any())
                {
                    @foreach (var loan in _loans)
                    {
                        <div class="d-flex justify-space-between mb-2">
                            <MudText>@loan.Name (@loan.Type)</MudText>
                            <MudText>@loan.Amount.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                        </div>
                    }
                    <MudDivider Class="my-2" />
                    <div class="d-flex justify-space-between">
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">Totalt:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@_totalLoanValue.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                    </div>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Inga lån registrerade</MudText>
                }
            </MudPaper>

            <!-- Total Liabilities -->
            <MudPaper Class="pa-4" Elevation="3">
                <div class="d-flex justify-space-between">
                    <MudText Typo="Typo.h6" Color="Color.Error">Totala Skulder:</MudText>
                    <MudText Typo="Typo.h6" Color="Color.Error" Class="font-weight-bold">
                        @_totalLiabilities.ToString("C0", new System.Globalization.CultureInfo("sv-SE"))
                    </MudText>
                </div>
            </MudPaper>

            <!-- Visual Breakdown -->
            <MudPaper Class="pa-4 mt-3">
                <MudText Typo="Typo.h6" Class="mb-3">Fördelning</MudText>
                <MudProgressLinear Color="Color.Success" Size="Size.Large" Value="@GetAssetPercentage()" Class="mb-2">
                    <MudText Typo="Typo.body2">Tillgångar @GetAssetPercentage().ToString("F1")%</MudText>
                </MudProgressLinear>
                <MudProgressLinear Color="Color.Error" Size="Size.Large" Value="@GetLiabilityPercentage()" Class="mb-2">
                    <MudText Typo="Typo.body2">Skulder @GetLiabilityPercentage().ToString("F1")%</MudText>
                </MudProgressLinear>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Quick Stats -->
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6" Class="mb-3">Översikt</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Skuldkvot</MudText>
                        <MudText Typo="Typo.h5">@GetDebtRatio().ToString("F1")%</MudText>
                        <MudText Typo="Typo.caption">Skulder / Tillgångar</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Antal Tillgångar</MudText>
                        <MudText Typo="Typo.h5">@(_bankAccounts.Count() + _investments.Count() + _assets.Count())</MudText>
                        <MudText Typo="Typo.caption">Bankkonton, Investeringar, Fysiska</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Antal Skulder</MudText>
                        <MudText Typo="Typo.h5">@_loans.Count()</MudText>
                        <MudText Typo="Typo.caption">Lån och Krediter</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Likvida Medel</MudText>
                        <MudText Typo="Typo.h5">@_totalBankBalance.ToString("C0", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                        <MudText Typo="Typo.caption">Bankkonton</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {
    private bool _loading = true;
    
    // Assets
    private IEnumerable<BankSource> _bankAccounts = new List<BankSource>();
    private IEnumerable<Investment> _investments = new List<Investment>();
    private IEnumerable<Asset> _assets = new List<Asset>();
    private decimal _totalBankBalance = 0;
    private decimal _totalInvestmentValue = 0;
    private decimal _totalAssetValue = 0;
    private decimal _totalAssets = 0;
    
    // Liabilities
    private IEnumerable<Loan> _loans = new List<Loan>();
    private decimal _totalLoanValue = 0;
    private decimal _totalLiabilities = 0;
    
    // Net Worth
    private decimal _netWorth = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;

        // Load all assets
        _bankAccounts = await BankSourceService.GetAllBankSourcesAsync();
        _investments = await InvestmentService.GetAllInvestmentsAsync();
        _assets = await AssetService.GetAllAssetsAsync();
        
        // Load all liabilities
        _loans = await LoanService.GetAllLoansAsync();

        // Calculate totals for assets
        _totalBankBalance = _bankAccounts.Sum(b => b.CurrentBalance);
        _totalInvestmentValue = _investments.Sum(i => i.TotalValue);
        _totalAssetValue = _assets.Sum(a => a.CurrentValue);
        _totalAssets = _totalBankBalance + _totalInvestmentValue + _totalAssetValue;

        // Calculate totals for liabilities
        _totalLoanValue = _loans.Sum(l => l.Amount);
        _totalLiabilities = _totalLoanValue;

        // Calculate net worth
        _netWorth = _totalAssets - _totalLiabilities;

        _loading = false;
    }

    private double GetAssetPercentage()
    {
        if (_totalAssets + _totalLiabilities == 0) return 0;
        return (double)(_totalAssets / (_totalAssets + _totalLiabilities) * 100);
    }

    private double GetLiabilityPercentage()
    {
        if (_totalAssets + _totalLiabilities == 0) return 0;
        return (double)(_totalLiabilities / (_totalAssets + _totalLiabilities) * 100);
    }

    private double GetDebtRatio()
    {
        if (_totalAssets == 0) return 0;
        return (double)(_totalLiabilities / _totalAssets * 100);
    }
}
