@page "/dashboard/custom"
@rendermode InteractiveServer
@using Privatekonomi.Core.Services
@using Privatekonomi.Core.Models
@using Privatekonomi.Web.Components.Dialogs
@using Privatekonomi.Web.Components.Widgets
@inject IDashboardLayoutService LayoutService
@inject IReportService ReportService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ICurrentUserService CurrentUserService

<PageTitle>Anpassad Dashboard - Privatekonomi</PageTitle>

<div class="d-flex flex-column flex-md-row justify-space-between align-start align-md-center mb-4 gap-2">
    <div>
        <MudText Typo="Typo.h4">Anpassad Dashboard</MudText>
        <MudText Typo="Typo.body2" Color="Color.Secondary">
            Din personliga översikt med anpassningsbara widgets
        </MudText>
    </div>
    <div class="d-flex flex-wrap gap-2">
        <MudButton OnClick="@ManageLayouts" 
                   Variant="Variant.Text" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Dashboard"
                   Size="Size.Small">
            Hantera Layouter
        </MudButton>
        <MudButton Href="/" 
                   Variant="Variant.Outlined" 
                   Color="Color.Default" 
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   Size="Size.Small">
            Tillbaka till Standard Dashboard
        </MudButton>
    </div>
</div>

@if (_currentLayout != null)
{
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <div class="d-flex justify-space-between align-center">
            <div class="d-flex align-center gap-2">
                <MudIcon Icon="@Icons.Material.Filled.ViewModule" Size="Size.Small" />
                <MudText Typo="Typo.subtitle1">Layout: <strong>@_currentLayout.Name</strong></MudText>
                @if (_currentLayout.IsDefault)
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.Star">
                        Standard
                    </MudChip>
                }
            </div>
            <MudText Typo="Typo.caption" Color="Color.Secondary">
                @_currentLayout.Widgets.Count widgets
            </MudText>
        </div>
    </MudPaper>
}

@if (_loading)
{
    <div class="d-flex flex-column align-center pa-6">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">Laddar dashboard...</MudText>
    </div>
}
else if (_currentLayout == null || !_currentLayout.Widgets.Any())
{
    <MudPaper Class="pa-6" Elevation="2">
        <div class="d-flex flex-column align-center">
            <MudIcon Icon="@Icons.Material.Filled.Dashboard" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Class="mt-4">Ingen layout vald</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2 mb-4">
                Din dashboard är tom. Klicka på "Hantera Layouter" för att skapa eller välja en layout.
            </MudText>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary"
                       OnClick="@ManageLayouts"
                       StartIcon="@Icons.Material.Filled.Dashboard">
                Hantera Layouter
            </MudButton>
        </div>
    </MudPaper>
}
else
{
    <MudGrid Spacing="3">
        @foreach (var widget in _currentLayout.Widgets.OrderBy(w => w.Row).ThenBy(w => w.Column))
        {
            <MudItem xs="12" md="@widget.Width">
                <WidgetRenderer Configuration="@widget" PeriodComparisonData="@_periodComparison" />
            </MudItem>
        }
    </MudGrid>
}

@code {
    private bool _loading = true;
    private DashboardLayout? _currentLayout;
    private PeriodComparisonReport? _periodComparison;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboard();
    }

    private async Task LoadDashboard()
    {
        _loading = true;
        try
        {
            if (CurrentUserService?.UserId != null)
            {
                // Try to load default layout
                _currentLayout = await LayoutService.GetDefaultLayoutAsync(CurrentUserService.UserId);

                // Load period comparison data for widgets that need it
                try
                {
                    _periodComparison = await ReportService.GetPeriodComparisonAsync();
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Kunde inte ladda periodjämförelse: {ex.Message}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Kunde inte ladda dashboard: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ManageLayouts()
    {
        if (CurrentUserService?.UserId == null)
        {
            Snackbar.Add("Du måste vara inloggad för att hantera layouter", Severity.Warning);
            return;
        }

        var parameters = new DialogParameters<DashboardLayoutDialog>
        {
            { x => x.UserId, CurrentUserService.UserId },
            { x => x.OnLayoutSelected, EventCallback.Factory.Create<DashboardLayout>(this, OnLayoutSelected) }
        };

        var dialog = await DialogService.ShowAsync<DashboardLayoutDialog>("Hantera Layouter", parameters, new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });

        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data is DashboardLayout selectedLayout)
        {
            _currentLayout = selectedLayout;
            StateHasChanged();
        }
    }

    private void OnLayoutSelected(DashboardLayout selectedLayout)
    {
        _currentLayout = selectedLayout;
        Snackbar.Add($"Layout '{selectedLayout.Name}' vald", Severity.Success);
    }
}
