@page "/transactions"
@rendermode InteractiveServer
@inject ITransactionService TransactionService
@inject IHouseholdService HouseholdService
@inject IExportService ExportService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Transaktioner - Privatekonomi</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Transaktioner</MudText>

<MudPaper Class="pa-4">
    <MudGrid>
        <MudItem xs="12" Class="d-flex flex-column flex-sm-row justify-space-between align-start align-sm-center gap-2 mb-4">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add" 
                       OnClick="@(() => Navigation.NavigateTo("/transactions/new"))">
                Ny Transaktion
            </MudButton>
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                <MudButton StartIcon="@Icons.Material.Filled.Download" OnClick="ExportToCsv">
                    <span class="d-none d-sm-inline">Exportera </span>CSV
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Download" OnClick="ExportToJson">
                    <span class="d-none d-sm-inline">Exportera </span>JSON
                </MudButton>
            </MudButtonGroup>
        </MudItem>
    </MudGrid>

    @if (_loading)
    {
        <div class="d-flex flex-column align-center pa-6">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">Laddar transaktioner...</MudText>
        </div>
    }
    else if (!_transactions.Any())
    {
        <MudPaper Class="pa-6" Elevation="0" Style="text-align: center;">
            <MudIcon Icon="@Icons.Material.Filled.Receipt" Size="Size.Large" Color="Color.Secondary" Class="mb-4" Style="font-size: 4rem;" />
            <MudText Typo="Typo.h6" Class="mb-2">Inga transaktioner än</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                Kom igång genom att skapa din första transaktion eller importera transaktioner från din bank.
            </MudText>
            <div class="d-flex justify-center gap-2">
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@(() => Navigation.NavigateTo("/transactions/new"))">
                    Skapa Transaktion
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Upload"
                           OnClick="@(() => Navigation.NavigateTo("/import"))">
                    Importera från Bank
                </MudButton>
            </div>
        </MudPaper>
    }
    else
    {
        <MudTable Items="@_transactions" 
                  Hover="true" 
                  Striped="true" 
                  Filter="new Func<Transaction,bool>(FilterFunc)"
                  Dense="@_dense"
                  FixedHeader="true"
                  Height="600px">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" 
                              Placeholder="Sök transaktion..." 
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search" 
                              IconSize="Size.Medium" 
                              Class="mt-0 mr-2"
                              aria-label="Sök i transaktioner"></MudTextField>
                <MudSelect T="int?" 
                          @bind-Value="_selectedHouseholdId" 
                          Label="Filtrera efter hushåll" 
                          Clearable="true" 
                          Style="min-width: 200px;" 
                          Class="mt-0"
                          aria-label="Filtrera transaktioner efter hushåll">
                    @foreach (var household in _households)
                    {
                        <MudSelectItem Value="@((int?)household.HouseholdId)">@household.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSpacer />
                <MudTooltip Text="Tät/luftig layout">
                    <MudIconButton Icon="@Icons.Material.Filled.DensityMedium" 
                                   OnClick="@(() => _dense = !_dense)"
                                   Color="Color.Default"
                                   aria-label="Växla mellan tät och luftig layout" />
                </MudTooltip>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Datum</MudTh>
                <MudTh>Beskrivning</MudTh>
                <MudTh>Bank</MudTh>
                <MudTh>Hushåll</MudTh>
                <MudTh>Kategori</MudTh>
                <MudTh Style="text-align: right">Belopp</MudTh>
                <MudTh>Åtgärder</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Datum" id="@($"transaction-row-{context.TransactionId}")" class="transaction-row-swipeable">@context.Date.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="Beskrivning">
                    <div class="d-flex align-center">
                        @context.Description
                        @if (!string.IsNullOrWhiteSpace(context.Notes) || !string.IsNullOrWhiteSpace(context.Tags))
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Info"
                                           OnClick="@(() => ToggleDetails(context.TransactionId))" />
                        }
                    </div>
                    @if (_expandedTransactionId == context.TransactionId)
                    {
                        <MudPaper Class="pa-2 mt-2" Elevation="0" Style="background-color: #f5f5f5;">
                            @if (!string.IsNullOrWhiteSpace(context.Tags))
                            {
                                <div class="mb-2">
                                    <MudText Typo="Typo.caption" Style="font-weight: 600;">Taggar:</MudText>
                                    @foreach (var tag in context.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined">@tag.Trim()</MudChip>
                                    }
                                </div>
                            }
                            @if (!string.IsNullOrWhiteSpace(context.Notes))
                            {
                                <div>
                                    <MudText Typo="Typo.caption" Style="font-weight: 600;">Noteringar:</MudText>
                                    <MudText Typo="Typo.body2">@context.Notes</MudText>
                                </div>
                            }
                        </MudPaper>
                    }
                </MudTd>
                <MudTd DataLabel="Bank">
                    @if (context.BankSource != null)
                    {
                        <MudChip T="string" Size="Size.Small" Variant="Variant.Filled"
                                 Style="@($"background-color: {context.BankSource.Color}; color: white;")">
                            @context.BankSource.Name
                        </MudChip>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Default">-</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Hushåll">
                    @if (context.Household != null)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Secondary" Variant="Variant.Outlined">
                            <MudIcon Icon="@Icons.Material.Filled.Home" Size="Size.Small" /> @context.Household.Name
                        </MudChip>
                    }
                    else
                    {
                        <MudText Typo="Typo.caption" Color="Color.Default">Personlig</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Kategori">
                    @if (context.TransactionCategories.Any())
                    {
                        @foreach (var tc in context.TransactionCategories)
                        {
                            <MudChip T="string" Size="Size.Small" Variant="Variant.Filled"
                                     Style="@($"background-color: {tc.Category.Color}; color: white; margin: 2px;")">
                                @tc.Category.Name
                            </MudChip>
                        }
                    }
                    else
                    {
                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default">
                            Okategoriserad
                        </MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Belopp" Style="text-align: right">
                    <MudText Typo="Typo.body1" Style="@($"font-weight: 600; color: {(context.IsIncome ? "#2e7d32" : "#d32f2f")};")">
                        @(context.IsIncome ? "+" : "")@context.Amount.ToString("N2", new System.Globalization.CultureInfo("sv-SE")) kr
                    </MudText>
                </MudTd>
                <MudTd DataLabel="Åtgärder">
                    <MudTooltip Text="Redigera transaktion">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                                       OnClick="@(() => EditTransaction(context))" />
                    </MudTooltip>
                    <MudTooltip Text="Ta bort transaktion">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                       OnClick="@(() => DeleteTransaction(context.TransactionId))" />
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private bool _loading = true;
    private bool _dense = false;
    private IEnumerable<Transaction> _transactions = new List<Transaction>();
    private List<Household> _households = new();
    private string _searchString = "";
    private int? _expandedTransactionId = null;
    private int? _selectedHouseholdId = null;
    private DotNetObjectReference<Transactions>? _dotNetHelper;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("mobileGestureHandler.init", _dotNetHelper);
            await AttachGestureListeners();
        }
    }

    private async Task AttachGestureListeners()
    {
        // Attach swipe listeners to transaction rows
        foreach (var transaction in _transactions)
        {
            var elementId = $"transaction-row-{transaction.TransactionId}";
            await JSRuntime.InvokeVoidAsync("eval", 
                $@"(function() {{
                    var element = document.getElementById('{elementId}');
                    if (element) {{
                        window.mobileGestureHandler.attachSwipeListeners(element, {transaction.TransactionId});
                    }}
                }})()");
        }
    }

    [JSInvokable]
    public async Task HandleSwipeGesture(string direction, int transactionId)
    {
        var transaction = _transactions.FirstOrDefault(t => t.TransactionId == transactionId);
        if (transaction == null) return;

        if (direction == "left")
        {
            // Swipe left - delete
            await DeleteTransaction(transactionId);
        }
        else if (direction == "right")
        {
            // Swipe right - edit
            await EditTransaction(transaction);
        }
    }

    [JSInvokable]
    public async Task HandlePullToRefresh()
    {
        await LoadData();
        Snackbar.Add("Transaktioner uppdaterade", Severity.Success);
    }

    public void Dispose()
    {
        _dotNetHelper?.Dispose();
    }

    private async Task LoadData()
    {
        _loading = true;
        var households = await HouseholdService.GetAllHouseholdsAsync();
        _households = households.ToList();
        _transactions = await TransactionService.GetAllTransactionsAsync();
        _loading = false;
    }

    private bool FilterFunc(Transaction transaction)
    {
        // Filter by household
        if (_selectedHouseholdId.HasValue)
        {
            if (transaction.HouseholdId != _selectedHouseholdId.Value)
                return false;
        }
        
        // Filter by search string
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (transaction.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (transaction.TransactionCategories.Any(tc => tc.Category.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)))
            return true;
        if (transaction.BankSource != null && transaction.BankSource.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrWhiteSpace(transaction.Tags) && transaction.Tags.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrWhiteSpace(transaction.Notes) && transaction.Notes.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void ToggleDetails(int transactionId)
    {
        _expandedTransactionId = _expandedTransactionId == transactionId ? null : transactionId;
    }

    private async Task EditTransaction(Transaction transaction)
    {
        var parameters = new DialogParameters<EditTransactionDialog>
        {
            { x => x.Transaction, transaction }
        };

        var dialog = await DialogService.ShowAsync<EditTransactionDialog>("Redigera transaktion", parameters, new DialogOptions 
        { 
            MaxWidth = MaxWidth.Large, 
            FullWidth = true 
        });
        
        var result = await dialog.Result;
        
        if (result is not null && !result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task DeleteTransaction(int id)
    {
        var result = await DialogService.ShowMessageBox(
            "Bekräfta borttagning",
            "Är du säker på att du vill ta bort denna transaktion?",
            yesText: "Ja", cancelText: "Avbryt");

        if (result == true)
        {
            await TransactionService.DeleteTransactionAsync(id);
            Snackbar.Add("Transaktion borttagen", Severity.Success);
            await LoadData();
        }
    }

    private async Task ExportToCsv()
    {
        try
        {
            var csvData = await ExportService.ExportTransactionsToCsvAsync();
            var fileName = $"transaktioner_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            
            await DownloadFile(csvData, fileName, "text/csv");
            Snackbar.Add("Transaktioner exporterade till CSV", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ett fel uppstod vid export: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportToJson()
    {
        try
        {
            var jsonData = await ExportService.ExportTransactionsToJsonAsync();
            var fileName = $"transaktioner_{DateTime.Now:yyyyMMdd_HHmmss}.json";
            
            await DownloadFile(jsonData, fileName, "application/json");
            Snackbar.Add("Transaktioner exporterade till JSON", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ett fel uppstod vid export: {ex.Message}", Severity.Error);
        }
    }

    private async Task DownloadFile(byte[] fileData, string fileName, string contentType)
    {
        var base64 = Convert.ToBase64String(fileData);
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, contentType, base64);
    }
}
