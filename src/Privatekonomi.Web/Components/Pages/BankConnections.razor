@page "/bank-connections"
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IDialogService DialogService
@inject IJSRuntime JS
@using Privatekonomi.Core.Models
@using Privatekonomi.Core.Services

<PageTitle>Bankkopplingar - Privatekonomi</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Bankkopplingar</MudText>

<MudText Typo="Typo.body1" Class="mb-4">
    Anslut dina bankkonton via PSD2-API för automatisk transaktionsimport. Stöd för Swedbank, Avanza Bank och ICA Banken.
</MudText>

@if (_loading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-4 mb-4">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h6">Mina bankkopplingar</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add" OnClick="ShowAddConnectionDialog">
                Lägg till bank
            </MudButton>
        </div>

        @if (_connections == null || !_connections.Any())
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">
                Du har inga aktiva bankkopplingar. Klicka på "Lägg till bank" för att komma igång.
            </MudAlert>
        }
        else
        {
            <MudTable Items="_connections" Hover="true" Striped="true">
                <HeaderContent>
                    <MudTh>Bank</MudTh>
                    <MudTh>Konto</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Senast synkad</MudTh>
                    <MudTh>Auto-sync</MudTh>
                    <MudTh>Åtgärder</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Bank">
                        @if (context.BankSource != null)
                        {
                            <MudChip T="string" Color="Color.Primary" Size="Size.Small">@context.BankSource.Name</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Konto">@(context.ExternalAccountId ?? "Ej angivet")</MudTd>
                    <MudTd DataLabel="Status">
                        @if (context.Status == "Active")
                        {
                            <MudChip T="string" Color="Color.Success" Size="Size.Small">Aktiv</MudChip>
                        }
                        else if (context.Status == "Expired")
                        {
                            <MudChip T="string" Color="Color.Warning" Size="Size.Small">Utgången</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Error" Size="Size.Small">Fel</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Senast synkad">
                        @(context.LastSyncedAt?.ToString("yyyy-MM-dd HH:mm") ?? "Aldrig")
                    </MudTd>
                    <MudTd DataLabel="Auto-sync">
                        @(context.AutoSyncEnabled ? "Ja" : "Nej")
                    </MudTd>
                    <MudTd DataLabel="Åtgärder">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                      Color="Color.Primary" 
                                      Size="Size.Small"
                                      OnClick="@(() => EditConnection(context))"
                                      Title="Redigera" />
                        <MudIconButton Icon="@Icons.Material.Filled.Sync" 
                                      Color="Color.Primary" 
                                      Size="Size.Small"
                                      OnClick="@(() => SyncConnection(context))"
                                      Title="Synkronisera nu" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                      Color="Color.Error" 
                                      Size="Size.Small"
                                      OnClick="@(() => DeleteConnection(context))"
                                      Title="Ta bort" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>

    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6" Class="mb-2">Information om PSD2-API</MudText>
        <MudText Typo="Typo.body2" Class="mb-2">
            PSD2 (Payment Services Directive 2) är ett EU-direktiv som kräver att banker tillhandahåller API:er 
            för säker åtkomst till kontoinformation.
        </MudText>
        <MudAlert Severity="Severity.Info" Class="mt-2">
            <MudText Typo="Typo.body2">
                <strong>Obs:</strong> För att använda API-import behöver du konfigurera klient-credentials 
                i applikationens konfiguration. Se 
                <MudLink Href="/wiki/PSD2_API_GUIDE.md" Target="_blank">PSD2 API Guide</MudLink> 
                för mer information.
            </MudText>
        </MudAlert>
    </MudPaper>
}

@code {
    private bool _loading = true;
    private List<BankConnection>? _connections;

    protected override async Task OnInitializedAsync()
    {
        // Check if we're returning from OAuth callback
        var uri = new Uri(Navigation.Uri);
        var queryString = uri.Query;
        
        if (!string.IsNullOrEmpty(queryString) && queryString.StartsWith("?"))
        {
            var query = queryString.Substring(1).Split('&')
                .Select(part => part.Split('='))
                .Where(parts => parts.Length == 2)
                .ToDictionary(parts => parts[0], parts => Uri.UnescapeDataString(parts[1]));
            
            var error = query.TryGetValue("error", out var errorValue) ? errorValue : null;
            var code = query.TryGetValue("code", out var codeValue) ? codeValue : null;
            var state = query.TryGetValue("state", out var stateValue) ? stateValue : null;

            if (!string.IsNullOrEmpty(error))
            {
                Snackbar.Add($"Fel vid anslutning till bank: {error}", Severity.Error);
            }
            else if (!string.IsNullOrEmpty(code))
            {
                await CompleteConnection(code, state);
            }
        }

        await LoadConnections();
    }

    private async Task LoadConnections()
    {
        _loading = true;
        try
        {
            var response = await Http.GetFromJsonAsync<List<BankConnection>>("api/bankconnections");
            _connections = response ?? new List<BankConnection>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fel vid laddning av bankkopplingar: {ex.Message}", Severity.Error);
            _connections = new List<BankConnection>();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ShowAddConnectionDialog()
    {
        var dialog = await DialogService.ShowAsync<AddBankConnectionDialog>("Lägg till bankkoppling", new DialogOptions 
        { 
            MaxWidth = MaxWidth.Small, 
            FullWidth = true 
        });
        
        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data != null)
        {
            // Handle OAuth redirect
            dynamic authData = result.Data;
            if (!string.IsNullOrEmpty(authData.AuthorizationUrl))
            {
                // Redirect to bank's OAuth page
                Navigation.NavigateTo(authData.AuthorizationUrl, forceLoad: true);
            }
        }
    }

    private async Task CompleteConnection(string? code, string? state)
    {
        try
        {
            if (string.IsNullOrEmpty(code))
            {
                Snackbar.Add("Auktoriseringskod saknas", Severity.Error);
                return;
            }

            Snackbar.Add("Slutför bankanslutning...", Severity.Info);
            
            // In a real implementation, we would retrieve the stored connection data
            // For now, we'll show a message
            Snackbar.Add("Bank ansluten! Funktionaliteten är under utveckling.", Severity.Success);
            
            // Clean up URL
            Navigation.NavigateTo("/bank-connections", replace: true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fel vid slutförande av anslutning: {ex.Message}", Severity.Error);
        }
    }

    private async Task EditConnection(BankConnection connection)
    {
        var parameters = new DialogParameters<EditBankConnectionDialog>
        {
            { x => x.Connection, new EditBankConnectionDialog.BankConnection 
                { 
                    BankConnectionId = connection.BankConnectionId,
                    ExternalAccountId = connection.ExternalAccountId,
                    AutoSyncEnabled = connection.AutoSyncEnabled,
                    Status = connection.Status
                } 
            }
        };

        var dialog = await DialogService.ShowAsync<EditBankConnectionDialog>("Redigera bankkoppling", parameters, new DialogOptions 
        { 
            MaxWidth = MaxWidth.Small, 
            FullWidth = true 
        });
        
        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data is EditBankConnectionDialog.BankConnection updatedConnection)
        {
            try
            {
                // Update the connection via API
                connection.AutoSyncEnabled = updatedConnection.AutoSyncEnabled;
                connection.Status = updatedConnection.Status;
                connection.UpdatedAt = DateTime.UtcNow;

                var response = await Http.PutAsJsonAsync($"api/bankconnections/{connection.BankConnectionId}", connection);
                
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Bankkoppling uppdaterad", Severity.Success);
                    await LoadConnections();
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Fel vid uppdatering: {errorMsg}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Fel vid uppdatering: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task SyncConnection(BankConnection connection)
    {
        try
        {
            Snackbar.Add($"Synkroniserar {connection.BankSource?.Name}...", Severity.Info);
            
            // Get accounts for this connection
            var accountsResponse = await Http.GetFromJsonAsync<List<BankApiAccount>>($"api/bankconnections/{connection.BankConnectionId}/accounts");
            
            if (accountsResponse == null || !accountsResponse.Any())
            {
                Snackbar.Add("Inga konton hittades för denna anslutning", Severity.Warning);
                return;
            }

            // Use the first account or the stored ExternalAccountId
            var accountId = connection.ExternalAccountId ?? accountsResponse.First().AccountId;
            
            // Import transactions
            var importRequest = new
            {
                AccountId = accountId,
                FromDate = connection.LastSyncedAt ?? DateTime.Now.AddDays(-90),
                ToDate = DateTime.Now,
                SkipDuplicates = true
            };

            var importResponse = await Http.PostAsJsonAsync($"api/bankconnections/{connection.BankConnectionId}/import", importRequest);
            
            if (importResponse.IsSuccessStatusCode)
            {
                var result = await importResponse.Content.ReadFromJsonAsync<BankApiImportResult>();
                Snackbar.Add($"Synkronisering slutförd: {result?.ImportedCount ?? 0} nya transaktioner", Severity.Success);
                await LoadConnections();
            }
            else
            {
                var errorMsg = await importResponse.Content.ReadAsStringAsync();
                Snackbar.Add($"Fel vid synkronisering: {errorMsg}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fel vid synkronisering: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteConnection(BankConnection connection)
    {
        var result = await DialogService.ShowMessageBox(
            "Bekräfta borttagning",
            $"Är du säker på att du vill ta bort kopplingen till {connection.BankSource?.Name}? Denna åtgärd kan inte ångras.",
            yesText: "Ta bort", 
            cancelText: "Avbryt");

        if (result == true)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/bankconnections/{connection.BankConnectionId}");
                
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Bankkoppling borttagen", Severity.Success);
                    await LoadConnections();
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Fel vid borttagning: {errorMsg}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Fel vid borttagning: {ex.Message}", Severity.Error);
            }
        }
    }

    // DTO classes for API responses
    public class BankApiAccount
    {
        public string AccountId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public decimal Balance { get; set; }
    }

    public class BankApiImportResult
    {
        public int ImportedCount { get; set; }
        public int SkippedCount { get; set; }
        public List<string>? Errors { get; set; }
    }
}
