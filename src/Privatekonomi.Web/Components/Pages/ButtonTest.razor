@page "/button-test"
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Button Test</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">MudBlazor Button Test</MudText>
        
        <MudAlert Severity="Severity.Info" Class="mb-4">
            This page tests various MudBlazor button types to diagnose click issues.
        </MudAlert>

        <MudGrid>
            <MudItem xs="12" Class="mb-3">
                <MudText Typo="Typo.h6">Basic Buttons</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="@(() => TestButtonClick("Basic Filled Button"))"
                          Class="mr-2">
                    Basic Filled Button
                </MudButton>
                
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          OnClick="@(() => TestButtonClick("Basic Outlined Button"))"
                          Class="mr-2">
                    Basic Outlined Button
                </MudButton>
                
                <MudButton Variant="Variant.Text" 
                          Color="Color.Tertiary" 
                          OnClick="@(() => TestButtonClick("Basic Text Button"))">
                    Basic Text Button
                </MudButton>
            </MudItem>

            <MudItem xs="12" Class="mb-3">
                <MudText Typo="Typo.h6">Icon Buttons</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Add" 
                              Color="Color.Primary" 
                              OnClick="@(() => TestButtonClick("Add Icon Button"))"
                              title="Add something"
                              Class="mr-2" />
                              
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                              Color="Color.Secondary" 
                              OnClick="@(() => TestButtonClick("Edit Icon Button"))"
                              title="Edit something"
                              Class="mr-2" />
                              
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                              Color="Color.Error" 
                              OnClick="@(() => TestButtonClick("Delete Icon Button"))"
                              title="Delete something" />
            </MudItem>

            <MudItem xs="12" Class="mb-3">
                <MudText Typo="Typo.h6">Async Buttons</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Success" 
                          OnClick="@TestAsyncButtonClick"
                          Disabled="@_isLoading"
                          Class="mr-2">
                    @if (_isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <text>Loading...</text>
                    }
                    else
                    {
                        <text>Async Button</text>
                    }
                </MudButton>
                
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Warning" 
                          OnClick="@(() => TestJavaScriptInterop())"
                          Class="mr-2">
                    JS Interop Test
                </MudButton>
            </MudItem>

            <MudItem xs="12" Class="mb-3">
                <MudText Typo="Typo.h6">Button with Parameters</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Info" 
                          OnClick="@(() => TestParameterizedClick("Parameter Value", 42))"
                          Class="mr-2">
                    Parameterized Button
                </MudButton>
            </MudItem>

            <MudItem xs="12" Class="mb-3">
                <MudText Typo="Typo.h6">Click Counter</MudText>
                <MudText>Clicks: @_clickCount</MudText>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Primary" 
                          OnClick="@IncrementCounter">
                    Increment Counter
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.h6">Debug Information</MudText>
                <MudTextField @bind-Value="_debugInfo" 
                             Label="Debug Output" 
                             Variant="Variant.Outlined" 
                             Lines="5" 
                             ReadOnly="true" />
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private bool _isLoading = false;
    private int _clickCount = 0;
    private string _debugInfo = "Waiting for button clicks...\n";

    private void TestButtonClick(string buttonName)
    {
        var message = $"‚úÖ {buttonName} clicked at {DateTime.Now:HH:mm:ss}";
        Snackbar.Add(message, Severity.Success);
        
        _debugInfo += $"{message}\n";
        StateHasChanged();
        
        Console.WriteLine($"[ButtonTest] {message}");
    }

    private async Task TestAsyncButtonClick()
    {
        try 
        {
            _isLoading = true;
            StateHasChanged();
            
            _debugInfo += $"üîÑ Async button click started at {DateTime.Now:HH:mm:ss}\n";
            
            // Simulate async work
            await Task.Delay(2000);
            
            _isLoading = false;
            var message = "‚úÖ Async button completed successfully";
            Snackbar.Add(message, Severity.Success);
            
            _debugInfo += $"{message} at {DateTime.Now:HH:mm:ss}\n";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _isLoading = false;
            var errorMessage = $"‚ùå Async button error: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
            _debugInfo += $"{errorMessage}\n";
            StateHasChanged();
        }
    }

    private async Task TestJavaScriptInterop()
    {
        try
        {
            var result = await JSRuntime.InvokeAsync<bool>("confirm", "JavaScript interop working! Continue?");
            var message = $"üîß JS Interop result: {result}";
            Snackbar.Add(message, Severity.Info);
            _debugInfo += $"{message}\n";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            var errorMessage = $"‚ùå JS Interop error: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
            _debugInfo += $"{errorMessage}\n";
            StateHasChanged();
        }
    }

    private void TestParameterizedClick(string param1, int param2)
    {
        var message = $"üìã Parameterized click: '{param1}', {param2}";
        Snackbar.Add(message, Severity.Info);
        _debugInfo += $"{message}\n";
        StateHasChanged();
    }

    private void IncrementCounter()
    {
        _clickCount++;
        var message = $"üî¢ Counter incremented to {_clickCount}";
        Snackbar.Add($"Counter: {_clickCount}", Severity.Normal);
        _debugInfo += $"{message}\n";
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _debugInfo += $"üöÄ ButtonTest page initialized at {DateTime.Now:HH:mm:ss}\n";
    }
}