@page "/"
@rendermode InteractiveServer
@using Privatekonomi.Web.Components.Dialogs
@using Privatekonomi.Web.Services
@inject ITransactionService TransactionService
@inject ICategoryService CategoryService
@inject IBudgetService BudgetService
@inject IReportService ReportService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject DashboardPreferencesService PreferencesService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Dashboard - Privatekonomi</PageTitle>

<div class="d-flex flex-column flex-md-row justify-space-between align-start align-md-center mb-4 gap-2">
    <div>
        <MudText Typo="Typo.h4">Dashboard</MudText>
        <MudText Typo="Typo.body2" Color="Color.Secondary">
            Översikt av din ekonomi med inkomster, utgifter och kassaflöde.
        </MudText>
    </div>
    <div class="d-flex flex-wrap gap-2">
        <MudButton OnClick="@CustomizeDashboard" 
                   Variant="Variant.Text" 
                   Color="Color.Default" 
                   StartIcon="@Icons.Material.Filled.Tune"
                   Size="Size.Small">
            Anpassa
        </MudButton>
        <MudButton Href="/transactions/new" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   Size="Size.Small">
            Ny Transaktion
        </MudButton>
        <MudButton Href="/budgets" 
                   Variant="Variant.Outlined" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.PieChart"
                   Size="Size.Small">
            Budget
        </MudButton>
    </div>
</div>

@if (_loading)
{
    <div class="d-flex flex-column align-center pa-6">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">Laddar dashboard...</MudText>
    </div>
}
else
{
    @if (_preferences.ShowTotalCards)
    {
    <MudGrid>
        <MudItem xs="12" md="6" lg="3">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Color="Color.Success">Totala Inkomster</MudText>
                    <MudText Typo="Typo.h4">@_totalIncome.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Color="Color.Error">Totala Utgifter</MudText>
                    <MudText Typo="Typo.h4">@_totalExpenses.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Color="Color.Info">Nettoresultat</MudText>
                    <MudText Typo="Typo.h4">@((_totalIncome - _totalExpenses).ToString("C", new System.Globalization.CultureInfo("sv-SE")))</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="6" lg="3">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Antal Transaktioner</MudText>
                    <MudText Typo="Typo.h4">@_transactions.Count()</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    }

    @if (_transactions.Any() && (_preferences.ShowExpensePieChart || _preferences.ShowIncomePieChart || _preferences.ShowCashFlowChart || _preferences.ShowCategoryBarChart))
    {
        <MudPaper Class="pa-4 mt-4 chart-filters" Elevation="2">
            <div class="filter-group">
                <MudText Typo="Typo.subtitle1" Class="filter-label mb-2">Tidsperiod</MudText>
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" Class="chart-touch-target">
                    <MudButton OnClick="@(() => ChangePeriod(6))" 
                               Variant="@(_selectedMonths == 6 ? Variant.Filled : Variant.Outlined)"
                               aria-label="Visa senaste 6 månaderna"
                               Class="chart-filter-button">
                        6 månader
                    </MudButton>
                    <MudButton OnClick="@(() => ChangePeriod(12))" 
                               Variant="@(_selectedMonths == 12 ? Variant.Filled : Variant.Outlined)"
                               aria-label="Visa senaste 12 månaderna"
                               Class="chart-filter-button">
                        12 månader
                    </MudButton>
                    <MudButton OnClick="@(() => ChangePeriod(24))" 
                               Variant="@(_selectedMonths == 24 ? Variant.Filled : Variant.Outlined)"
                               aria-label="Visa senaste 24 månaderna"
                               Class="chart-filter-button">
                        24 månader
                    </MudButton>
                </MudButtonGroup>
            </div>
        </MudPaper>

        <MudGrid Class="mt-4" Spacing="3">
            @if (_preferences.ShowExpensePieChart)
            {
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-4 chart-wrapper" Elevation="2">
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Utgiftsfördelning per Kategori</MudText>
                    </div>
                    @if (_expensePieData.Any())
                    {
                        <div role="img" aria-label="Cirkeldiagram som visar utgiftsfördelning per kategori">
                            <MudChart ChartType="ChartType.Pie" 
                                      InputData="@_expensePieData" 
                                      InputLabels="@_expensePieLabels"
                                      Width="100%" 
                                      Height="300px"
                                      LegendPosition="Position.Bottom"
                                      Class="chart-responsive chart-height-md" />
                        </div>
                        <p class="chart-sr-only">
                            Cirkeldiagram visar utgifter fördelade på kategorier: @string.Join(", ", _expensePieLabels).
                        </p>
                    }
                    else
                    {
                        <div class="chart-empty">
                            <MudIcon Icon="@Icons.Material.Filled.PieChart" Class="chart-empty-icon" />
                            <MudText Class="chart-empty-message">Inga utgifter för vald period</MudText>
                            <MudText Typo="Typo.body2" Class="chart-empty-hint">
                                Registrera transaktioner för att se fördelning.
                            </MudText>
                        </div>
                    }
                </MudPaper>
            </MudItem>
            }

            @if (_preferences.ShowIncomePieChart)
            {
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-4 chart-wrapper" Elevation="2">
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Inkomstfördelning per Kategori</MudText>
                    </div>
                    @if (_incomePieData.Any())
                    {
                        <div role="img" aria-label="Cirkeldiagram som visar inkomstfördelning per kategori">
                            <MudChart ChartType="ChartType.Pie" 
                                      InputData="@_incomePieData" 
                                      InputLabels="@_incomePieLabels"
                                      Width="100%" 
                                      Height="300px"
                                      LegendPosition="Position.Bottom"
                                      Class="chart-responsive chart-height-md" />
                        </div>
                        <p class="chart-sr-only">
                            Cirkeldiagram visar inkomster fördelade på kategorier: @string.Join(", ", _incomePieLabels).
                        </p>
                    }
                    else
                    {
                        <div class="chart-empty">
                            <MudIcon Icon="@Icons.Material.Filled.PieChart" Class="chart-empty-icon" />
                            <MudText Class="chart-empty-message">Inga inkomster för vald period</MudText>
                            <MudText Typo="Typo.body2" Class="chart-empty-hint">
                                Registrera transaktioner för att se fördelning.
                            </MudText>
                        </div>
                    }
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Class="pa-4 chart-wrapper" Elevation="2">
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Kassaflöde över tid</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="chart-subtitle">
                            Inkomster och utgifter månadsvis
                        </MudText>
                    </div>
                    @if (_cashFlowSeries.Any())
                    {
                        <div role="img" aria-label="Linjediagram som visar kassaflöde över tid med inkomster och utgifter">
                            <MudChart ChartType="ChartType.Line" 
                                      ChartSeries="@_cashFlowSeries" 
                                      XAxisLabels="@_cashFlowLabels"
                                      Width="100%" 
                                      Height="350px"
                                      ChartOptions="@_chartOptions"
                                      Class="chart-responsive chart-height-lg" />
                        </div>
                        <p class="chart-sr-only">
                            Linjediagram visar kassaflöde med @_cashFlowSeries.Count dataserier över @_cashFlowLabels.Length månader.
                        </p>
                    }
                    else
                    {
                        <div class="chart-empty">
                            <MudIcon Icon="@Icons.Material.Filled.ShowChart" Class="chart-empty-icon" />
                            <MudText Class="chart-empty-message">Inga kassaflödesdata att visa</MudText>
                            <MudText Typo="Typo.body2" Class="chart-empty-hint">
                                Data kommer att visas när du har registrerat transaktioner.
                            </MudText>
                        </div>
                    }
                </MudPaper>
            </MudItem>
            }

            @if (_preferences.ShowCategoryBarChart)
            {
            <MudItem xs="12">
                <MudPaper Class="pa-4 chart-wrapper" Elevation="2">
                    <div class="chart-header">
                        <MudText Typo="Typo.h6" Class="chart-title">Utgifter per Kategori - Månadsvis Jämförelse</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="chart-subtitle">
                            Jämför utgifter mellan månader per kategori
                        </MudText>
                    </div>
                    @if (_barChartSeries.Any())
                    {
                        <div role="img" aria-label="Stapeldiagram som visar utgifter per kategori månadsvis">
                            <MudChart ChartType="ChartType.Bar" 
                                      ChartSeries="@_barChartSeries" 
                                      XAxisLabels="@_barChartLabels"
                                      Width="100%" 
                                      Height="400px"
                                      ChartOptions="@_chartOptions"
                                      Class="chart-responsive chart-height-lg" />
                        </div>
                        <p class="chart-sr-only">
                            Stapeldiagram visar utgifter för @_barChartSeries.Count kategorier över @_barChartLabels.Length månader.
                        </p>
                    }
                    else
                    {
                        <div class="chart-empty">
                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="chart-empty-icon" />
                            <MudText Class="chart-empty-message">Inga data att visa för vald period</MudText>
                            <MudText Typo="Typo.body2" Class="chart-empty-hint">
                                Välj en period med transaktioner för att se jämförelsen.
                            </MudText>
                        </div>
                    }
                </MudPaper>
            </MudItem>
            }
        </MudGrid>
    }

    @* Active Budgets Overview *@
    @if (_activeBudgets.Any() && _preferences.ShowActiveBudgets)
    {
        <MudPaper Class="pa-4 mt-4">
            <MudText Typo="Typo.h6" Class="mb-4">Aktiva Budgetar</MudText>
            <MudGrid>
                @foreach (var budget in _activeBudgets)
                {
                    <MudItem xs="12" md="6">
                        <MudCard Elevation="2">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@budget.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                    @budget.StartDate.ToString("yyyy-MM-dd") - @budget.EndDate.ToString("yyyy-MM-dd")
                                </MudText>
                                
                                @if (_budgetActualAmounts.ContainsKey(budget.BudgetId))
                                {
                                    var actualAmounts = _budgetActualAmounts[budget.BudgetId];
                                    var totalPlanned = budget.BudgetCategories.Sum(bc => bc.PlannedAmount);
                                    var totalActual = actualAmounts.Values.Sum();
                                    var percentage = totalPlanned > 0 ? (double)(totalActual / totalPlanned) * 100 : 0;
                                    var progressColor = percentage <= 75 ? Color.Success : percentage <= 100 ? Color.Warning : Color.Error;
                                    
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.body2">Planerat:</MudText>
                                            <MudText Typo="Typo.h6">@totalPlanned.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.body2">Använt:</MudText>
                                            <MudText Typo="Typo.h6">@totalActual.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                                        </MudItem>
                                    </MudGrid>
                                    
                                    <MudProgressLinear Color="@progressColor" 
                                                     Size="Size.Large"
                                                     Value="@percentage" 
                                                     Min="0" 
                                                     Max="100"
                                                     Class="my-2">
                                        <MudText Typo="Typo.body2" Color="Color.Surface">
                                            @percentage.ToString("F0")%
                                        </MudText>
                                    </MudProgressLinear>
                                    
                                    <MudButton Variant="Variant.Text" 
                                             Color="Color.Primary" 
                                             Size="Size.Small"
                                             OnClick="@(() => ToggleBudgetDetails(budget.BudgetId))">
                                        @(_expandedBudgets.Contains(budget.BudgetId) ? "Dölj detaljer" : "Visa detaljer")
                                    </MudButton>
                                }
                            </MudCardContent>
                        </MudCard>
                        
                        @if (_expandedBudgets.Contains(budget.BudgetId) && _budgetTransactionsByCategory.ContainsKey(budget.BudgetId))
                        {
                            <MudPaper Class="pa-3 mt-2" Elevation="1">
                                <MudText Typo="Typo.subtitle2" Class="mb-2">Transaktioner per Kategori</MudText>
                                @foreach (var budgetCategory in budget.BudgetCategories.OrderByDescending(bc => _budgetActualAmounts[budget.BudgetId].ContainsKey(bc.CategoryId) ? _budgetActualAmounts[budget.BudgetId][bc.CategoryId] : 0))
                                {
                                    var categoryTransactions = _budgetTransactionsByCategory[budget.BudgetId].ContainsKey(budgetCategory.CategoryId) 
                                        ? _budgetTransactionsByCategory[budget.BudgetId][budgetCategory.CategoryId] 
                                        : new List<Transaction>();
                                    var actual = _budgetActualAmounts[budget.BudgetId].ContainsKey(budgetCategory.CategoryId) 
                                        ? _budgetActualAmounts[budget.BudgetId][budgetCategory.CategoryId] 
                                        : 0;
                                    
                                    <MudExpansionPanels Dense="true" Class="mb-2">
                                        <MudExpansionPanel>
                                            <TitleContent>
                                                <div class="d-flex align-center gap-2">
                                                    <MudChip T="string" 
                                                            Style="@($"background-color: {budgetCategory.Category.Color}; color: white;")" 
                                                            Size="Size.Small">
                                                        @budgetCategory.Category.Name
                                                    </MudChip>
                                                    <MudText Typo="Typo.body2">
                                                        @actual.ToString("C", new System.Globalization.CultureInfo("sv-SE")) / @budgetCategory.PlannedAmount.ToString("C", new System.Globalization.CultureInfo("sv-SE"))
                                                    </MudText>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                @if (categoryTransactions.Any())
                                                {
                                                    <MudTable Items="@categoryTransactions" Dense="true" Hover="true">
                                                        <HeaderContent>
                                                            <MudTh>Datum</MudTh>
                                                            <MudTh>Beskrivning</MudTh>
                                                            <MudTh Style="text-align: right">Belopp</MudTh>
                                                        </HeaderContent>
                                                        <RowTemplate>
                                                            <MudTd DataLabel="Datum">@context.Date.ToString("yyyy-MM-dd")</MudTd>
                                                            <MudTd DataLabel="Beskrivning">@context.Description</MudTd>
                                                            <MudTd DataLabel="Belopp" Style="text-align: right">
                                                                @context.Amount.ToString("C", new System.Globalization.CultureInfo("sv-SE"))
                                                            </MudTd>
                                                        </RowTemplate>
                                                    </MudTable>
                                                }
                                                else
                                                {
                                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Inga transaktioner i denna kategori</MudText>
                                                }
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                }
                            </MudPaper>
                        }
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
    }

    @* Unmapped Transactions *@
    @if (_unmappedTransactions.Any() && _preferences.ShowUnmappedTransactions)
    {
        <MudPaper Class="pa-4 mt-4">
            <MudAlert Severity="Severity.Warning" Class="mb-3">
                Det finns @_unmappedTransactions.Count() transaktioner utan kategori. Kategorisera dem för att inkludera i budgetanalys.
            </MudAlert>
            <MudText Typo="Typo.h6" Class="mb-4">Transaktioner utan Kategori</MudText>
            <MudTable Items="@_unmappedTransactions" Hover="true" Striped="true">
                <HeaderContent>
                    <MudTh>Datum</MudTh>
                    <MudTh>Beskrivning</MudTh>
                    <MudTh>Belopp</MudTh>
                    <MudTh>Åtgärd</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Datum">@context.Date.ToString("yyyy-MM-dd")</MudTd>
                    <MudTd DataLabel="Beskrivning">@context.Description</MudTd>
                    <MudTd DataLabel="Belopp">
                        <MudText Color="@(context.IsIncome ? Color.Success : Color.Error)">
                            @(context.IsIncome ? "+" : "-")@context.Amount.ToString("C", new System.Globalization.CultureInfo("sv-SE"))
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Åtgärd">
                        <MudButton Variant="Variant.Text" 
                                 Color="Color.Primary" 
                                 Size="Size.Small"
                                 StartIcon="@Icons.Material.Filled.Category"
                                 Href="@($"/transactions")">
                            Kategorisera
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }

    @if (_preferences.ShowRecentTransactions)
    {
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6" Class="mb-4">Senaste Transaktioner</MudText>
        @if (!_transactions.Any())
        {
            <MudText>Inga transaktioner ännu. Skapa din första transaktion!</MudText>
        }
        else
        {
            <MudTable Items="@_transactions.Take(_preferences.RecentTransactionsCount)" Hover="true" Striped="true">
                <HeaderContent>
                    <MudTh>Datum</MudTh>
                    <MudTh>Beskrivning</MudTh>
                    <MudTh>Kategori</MudTh>
                    <MudTh Style="text-align: right">Belopp</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Datum">@context.Date.ToString("yyyy-MM-dd")</MudTd>
                    <MudTd DataLabel="Beskrivning">@context.Description</MudTd>
                    <MudTd DataLabel="Kategori">
                        @if (context.TransactionCategories.Any())
                        {
                            @foreach (var tc in context.TransactionCategories)
                            {
                                <MudChip T="string" 
                                        Style="@($"background-color: {tc.Category.Color}; color: white;")" 
                                        Size="Size.Small"
                                        Class="mr-1">
                                    @tc.Category.Name
                                </MudChip>
                            }
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Default" Size="Size.Small">Ingen kategori</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Belopp" Style="text-align: right">
                        <MudText Color="@(context.IsIncome ? Color.Success : Color.Error)">
                            @(context.IsIncome ? "+" : "-")@context.Amount.ToString("C", new System.Globalization.CultureInfo("sv-SE"))
                        </MudText>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
    }
}

@code {
    private bool _loading = true;
    private IEnumerable<Transaction> _transactions = new List<Transaction>();
    private IEnumerable<Transaction> _unmappedTransactions = new List<Transaction>();
    private IEnumerable<Budget> _activeBudgets = new List<Budget>();
    private decimal _totalIncome = 0;
    private decimal _totalExpenses = 0;
    private int _selectedMonths = 12;
    private HashSet<int> _expandedBudgets = new();
    private Dictionary<int, Dictionary<int, decimal>> _budgetActualAmounts = new();
    private Dictionary<int, Dictionary<int, List<Transaction>>> _budgetTransactionsByCategory = new();
    private DashboardPreferences _preferences = new();

    // Chart data
    private double[] _expensePieData = Array.Empty<double>();
    private string[] _expensePieLabels = Array.Empty<string>();
    private double[] _incomePieData = Array.Empty<double>();
    private string[] _incomePieLabels = Array.Empty<string>();
    private List<ChartSeries> _barChartSeries = new();
    private string[] _barChartLabels = Array.Empty<string>();
    private List<ChartSeries> _cashFlowSeries = new();
    private string[] _cashFlowLabels = Array.Empty<string>();
    private ChartOptions _chartOptions = new ChartOptions
    {
        YAxisTicks = 1000,
        YAxisFormat = "C0"
    };

    protected override async Task OnInitializedAsync()
    {
        // Load preferences from localStorage
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "dashboard_preferences");
            PreferencesService.LoadPreferences(json);
            _preferences = PreferencesService.Preferences;
            _selectedMonths = _preferences.DefaultPeriodMonths;
        }
        catch
        {
            // Use default preferences if loading fails
        }
        
        PreferencesService.OnPreferencesChanged += OnPreferencesChanged;
        
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        _transactions = await TransactionService.GetAllTransactionsAsync();
        _unmappedTransactions = await TransactionService.GetUnmappedTransactionsAsync();
        _activeBudgets = await BudgetService.GetActiveBudgetsAsync();
        
        // Load budget details
        foreach (var budget in _activeBudgets)
        {
            _budgetActualAmounts[budget.BudgetId] = await BudgetService.GetActualAmountsByCategoryAsync(budget.BudgetId);
            _budgetTransactionsByCategory[budget.BudgetId] = await BudgetService.GetTransactionsByCategoryForBudgetAsync(budget.BudgetId);
        }
        
        _totalIncome = _transactions.Where(t => t.IsIncome).Sum(t => t.Amount);
        _totalExpenses = _transactions.Where(t => !t.IsIncome).Sum(t => t.Amount);
        await UpdateChartData();
        _loading = false;
    }

    private void ToggleBudgetDetails(int budgetId)
    {
        if (_expandedBudgets.Contains(budgetId))
        {
            _expandedBudgets.Remove(budgetId);
        }
        else
        {
            _expandedBudgets.Add(budgetId);
        }
    }

    private async Task ChangePeriod(int months)
    {
        _selectedMonths = months;
        await UpdateChartData();
    }

    private async Task UpdateChartData()
    {
        var cutoffDate = DateTime.Now.AddMonths(-_selectedMonths);
        var filteredTransactions = _transactions.Where(t => t.Date >= cutoffDate).ToList();

        // Pie chart for expenses by category
        var expensesByCategory = filteredTransactions
            .Where(t => !t.IsIncome)
            .SelectMany(t => t.TransactionCategories.Select(tc => new { Category = tc.Category.Name, t.Amount }))
            .GroupBy(x => x.Category)
            .Select(g => new { Category = g.Key, Total = g.Sum(x => x.Amount) })
            .OrderByDescending(x => x.Total)
            .ToList();

        _expensePieLabels = expensesByCategory.Select(x => x.Category).ToArray();
        _expensePieData = expensesByCategory.Select(x => (double)x.Total).ToArray();

        // Pie chart for income by category
        var incomeByCategory = filteredTransactions
            .Where(t => t.IsIncome)
            .SelectMany(t => t.TransactionCategories.Select(tc => new { Category = tc.Category.Name, t.Amount }))
            .GroupBy(x => x.Category)
            .Select(g => new { Category = g.Key, Total = g.Sum(x => x.Amount) })
            .OrderByDescending(x => x.Total)
            .ToList();

        _incomePieLabels = incomeByCategory.Select(x => x.Category).ToArray();
        _incomePieData = incomeByCategory.Select(x => (double)x.Total).ToArray();

        // Bar chart for monthly category comparison (expenses only)
        var monthlyData = filteredTransactions
            .Where(t => !t.IsIncome)
            .GroupBy(t => new { t.Date.Year, t.Date.Month })
            .OrderBy(g => g.Key.Year).ThenBy(g => g.Key.Month)
            .Select(g => new
            {
                Month = new DateTime(g.Key.Year, g.Key.Month, 1),
                Categories = g.SelectMany(t => t.TransactionCategories.Select(tc => new { tc.Category.Name, t.Amount }))
                             .GroupBy(x => x.Name)
                             .ToDictionary(cg => cg.Key, cg => cg.Sum(x => x.Amount))
            })
            .ToList();

        _barChartLabels = monthlyData.Select(m => m.Month.ToString("MMM yyyy", new System.Globalization.CultureInfo("sv-SE"))).ToArray();

        // Get top 5 categories by total amount
        var topCategories = expensesByCategory.Take(5).Select(x => x.Category).ToList();

        // Only create chart series if we have data
        if (monthlyData.Any() && topCategories.Any())
        {
            _barChartSeries = topCategories.Select(category => new ChartSeries
            {
                Name = category,
                Data = monthlyData.Select(m => m.Categories.ContainsKey(category) ? (double)m.Categories[category] : 0).ToArray()
            }).ToList();
        }
        else
        {
            _barChartSeries = new List<ChartSeries>();
        }

        // Cash flow chart
        try
        {
            var cashFlowReport = await ReportService.GetCashFlowReportAsync(cutoffDate, DateTime.Now);
            
            // Check if we have enough data points for chart rendering (minimum 4 required for MudChart Line)
            if (cashFlowReport.Periods.Count >= 4)
            {
                _cashFlowLabels = cashFlowReport.Periods.Select(p => p.Period).ToArray();
                
                _cashFlowSeries = new List<ChartSeries>
                {
                    new ChartSeries
                    {
                        Name = "Inkomster",
                        Data = cashFlowReport.Periods.Select(p => (double)p.Income).ToArray()
                    },
                    new ChartSeries
                    {
                        Name = "Utgifter",
                        Data = cashFlowReport.Periods.Select(p => (double)p.Expenses).ToArray()
                    },
                    new ChartSeries
                    {
                        Name = "Netto",
                        Data = cashFlowReport.Periods.Select(p => (double)p.NetFlow).ToArray()
                    }
                };
            }
            else
            {
                // Not enough data for chart - clear series and show message
                _cashFlowSeries = new List<ChartSeries>();
                _cashFlowLabels = Array.Empty<string>();
                
                if (cashFlowReport.Periods.Count == 0)
                {
                    Snackbar.Add("Inga transaktioner hittades för vald period", Severity.Info);
                }
                else
                {
                    Snackbar.Add($"Otillräckligt med data för kassaflödesdiagram (behöver minst 4 månader, har {cashFlowReport.Periods.Count})", Severity.Info);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Kunde inte ladda kassaflöde: {ex.Message}", Severity.Warning);
            _cashFlowSeries = new List<ChartSeries>();
            _cashFlowLabels = Array.Empty<string>();
        }
    }
    
    private async Task CustomizeDashboard()
    {
        var parameters = new DialogParameters<DashboardCustomizeDialog>
        {
            { x => x.Preferences, _preferences }
        };
        
        var dialog = await DialogService.ShowAsync<DashboardCustomizeDialog>("Anpassa Dashboard", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data is DashboardPreferences newPreferences)
        {
            _preferences = newPreferences;
            PreferencesService.UpdatePreferences(_preferences);
            
            // Save to localStorage
            try
            {
                var json = PreferencesService.SavePreferences();
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "dashboard_preferences", json);
                Snackbar.Add("Dashboard-inställningar sparade", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Kunde inte spara inställningar: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private void OnPreferencesChanged()
    {
        _preferences = PreferencesService.Preferences;
        StateHasChanged();
    }
    
    public void Dispose()
    {
        PreferencesService.OnPreferencesChanged -= OnPreferencesChanged;
    }
}
