@page "/subscriptions"
@rendermode InteractiveServer
@using Privatekonomi.Core.Models
@using Privatekonomi.Core.Services
@inject ISubscriptionService SubscriptionService
@inject ICategoryService CategoryService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Abonnemang - Privatekonomi</PageTitle>

<div class="d-flex justify-space-between align-center mb-4">
    <MudText Typo="Typo.h4">üìã Smart Avtalshantering</MudText>
    <div class="d-flex gap-2">
        <MudButton Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.Search" OnClick="DetectSubscriptions">
            Uppt√§ck Abonnemang
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleCreateForm">
            Nytt Abonnemang
        </MudButton>
    </div>
</div>

@* Alerts for unused subscriptions and cancellation deadlines *@
@if (!_loading && (_unusedSubscriptions.Any() || _upcomingDeadlines.Any()))
{
    <MudPaper Class="pa-4 mb-4">
        @if (_upcomingDeadlines.Any())
        {
            <MudAlert Severity="Severity.Warning" Class="mb-2">
                <MudText Typo="Typo.body2">
                    <strong>‚è∞ Upps√§gningsfrister n√§rmar sig (@_upcomingDeadlines.Count st):</strong>
                </MudText>
                @foreach (var sub in _upcomingDeadlines.Take(3))
                {
                    var daysLeft = (sub.CancellationDeadline!.Value - DateTime.UtcNow).Days;
                    <MudText Typo="Typo.body2" Class="ml-4">
                        ‚Ä¢ @sub.Name - Upps√§gning senast @sub.CancellationDeadline.Value.ToString("yyyy-MM-dd") (@daysLeft dagar kvar)
                    </MudText>
                }
            </MudAlert>
        }
        
        @if (_unusedSubscriptions.Any())
        {
            <MudAlert Severity="Severity.Info">
                <MudText Typo="Typo.body2">
                    <strong>‚ö†Ô∏è Oanv√§nda prenumerationer (@_unusedSubscriptions.Count st):</strong>
                </MudText>
                @foreach (var sub in _unusedSubscriptions.Take(3))
                {
                    var daysUnused = sub.LastUsedDate.HasValue 
                        ? (DateTime.UtcNow - sub.LastUsedDate.Value).Days 
                        : -1;
                    <MudText Typo="Typo.body2" Class="ml-4">
                        ‚Ä¢ @sub.Name - @sub.Price.ToString("C", new System.Globalization.CultureInfo("sv-SE"))/@GetFrequencyLabel(sub.BillingFrequency).ToLower() 
                        @if (daysUnused > 0)
                        {
                            <text>(Senast anv√§nd: @daysUnused dagar sedan)</text>
                        }
                        else
                        {
                            <text>(Aldrig anv√§nd)</text>
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Color="Color.Success" 
                                       OnClick="@(() => MarkAsUsed(sub))" aria-label="Markera som anv√§nd" />
                    </MudText>
                }
            </MudAlert>
        }
    </MudPaper>
}

@if (_showCreateForm)
{
    <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-3">@(_editingSubscription != null ? "Redigera Abonnemang" : "L√§gg till Nytt Abonnemang")</MudText>
        
        <MudTextField @bind-Value="_formSubscription.Name" 
                      Label="Namn" 
                      Variant="Variant.Outlined"
                      Required="true"
                      MaxLength="200"
                      Class="mb-3" />
        
        <MudTextField @bind-Value="_formSubscription.Description" 
                      Label="Beskrivning" 
                      Variant="Variant.Outlined"
                      Lines="2"
                      MaxLength="500"
                      Class="mb-3" />

        <MudNumericField @bind-Value="_formSubscription.Price" 
                         Label="Pris (kr)" 
                         Variant="Variant.Outlined"
                         Min="0"
                         Format="N2"
                         Culture="@(new System.Globalization.CultureInfo("sv-SE"))"
                         Class="mb-3" />

        <MudSelect @bind-Value="_formSubscription.BillingFrequency" Label="Faktureringsfrekvens" Variant="Variant.Outlined" Class="mb-3">
            <MudSelectItem Value="@("Monthly")">M√•nadsvis</MudSelectItem>
            <MudSelectItem Value="@("Yearly")">√Örligen</MudSelectItem>
            <MudSelectItem Value="@("Quarterly")">Kvartalsvis</MudSelectItem>
        </MudSelect>

        <MudDatePicker @bind-Date="_formStartDate"
                       Label="Startdatum"
                       Variant="Variant.Outlined"
                       Class="mb-3" />

        <MudDatePicker @bind-Date="_formNextBillingDate"
                       Label="N√§sta fakturadatum (valfritt)"
                       Variant="Variant.Outlined"
                       Class="mb-3" />

        <MudSelect @bind-Value="_formSubscription.CategoryId" 
                   Label="Kategori (valfritt)" 
                   Variant="Variant.Outlined" 
                   Class="mb-3"
                   Clearable="true">
            @foreach (var category in _categories)
            {
                <MudSelectItem Value="@((int?)category.CategoryId)">@category.Name</MudSelectItem>
            }
        </MudSelect>

        <MudTextField @bind-Value="_formSubscription.CancellationUrl" 
                      Label="Upps√§gningsl√§nk (valfritt)" 
                      Variant="Variant.Outlined"
                      MaxLength="500"
                      Class="mb-3" />

        <MudTextField @bind-Value="_formSubscription.ManagementUrl" 
                      Label="Hanteringsl√§nk (valfritt)" 
                      Variant="Variant.Outlined"
                      MaxLength="500"
                      Class="mb-3" />

        <MudTextField @bind-Value="_formSubscription.AccountEmail" 
                      Label="Kontoepost (valfritt)" 
                      Variant="Variant.Outlined"
                      MaxLength="200"
                      Class="mb-3" />

        <MudTextField @bind-Value="_formSubscription.Notes" 
                      Label="Anteckningar (valfritt)" 
                      Variant="Variant.Outlined"
                      Lines="2"
                      MaxLength="500"
                      Class="mb-3" />

        <MudDatePicker @bind-Date="_formCancellationDeadline"
                       Label="Upps√§gningsfrist (valfritt)"
                       Variant="Variant.Outlined"
                       Class="mb-3"
                       HelperText="Datum d√• upps√§gningen senast m√•ste g√∂ras" />

        <MudNumericField @bind-Value="_formSubscription.CancellationNoticeDays" 
                         Label="Upps√§gningstid (dagar)"
                         Variant="Variant.Outlined"
                         Min="0"
                         Class="mb-3"
                         HelperText="Antal dagar innan f√∂rnyelse som upps√§gning kr√§vs" />

        <MudDatePicker @bind-Date="_formLastUsedDate"
                       Label="Senast anv√§nd (valfritt)"
                       Variant="Variant.Outlined"
                       Class="mb-3"
                       HelperText="N√§r du senast anv√§nde denna tj√§nst" />

        <MudTextField @bind-Value="_formSubscription.SharedWith" 
                      Label="Delad med (valfritt)" 
                      Variant="Variant.Outlined"
                      MaxLength="500"
                      Class="mb-3"
                      HelperText="T.ex. 'Anna, Per, Lisa' f√∂r familjeabonnemang" />

        <MudSwitch @bind-Value="_formSubscription.IsActive" Label="Aktivt" Color="Color.Primary" Class="mb-3" />

        <div class="d-flex gap-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveSubscription">
                @(_editingSubscription != null ? "Uppdatera" : "L√§gg till")
            </MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="CancelForm">Avbryt</MudButton>
        </div>
    </MudPaper>
}

@if (_loading)
{
    <div class="d-flex flex-column align-center pa-6">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">Laddar abonnemang...</MudText>
    </div>
}
else
{
    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudCard Elevation="2" Class="pa-4">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">Aktiva Abonnemang</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Primary">@_activeCount</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudCard Elevation="2" Class="pa-4">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">M√•nadskostnad</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Secondary">@_monthlyCost.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudCard Elevation="2" Class="pa-4">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">√Örskostnad</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Info">@_yearlyCost.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudTabs Elevation="2" Rounded="true" Class="mb-4">
        <MudTabPanel Text="Aktiva" Icon="@Icons.Material.Filled.CheckCircle">
            <MudPaper Class="pa-4">
                @if (_activeSubscriptions.Any())
                {
                    <MudTable Items="_activeSubscriptions" Hover="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Namn</MudTh>
                            <MudTh>Pris</MudTh>
                            <MudTh>Frekvens</MudTh>
                            <MudTh>N√§sta faktura</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Delad med</MudTh>
                            <MudTh>L√§nkar</MudTh>
                            <MudTh>√Ötg√§rder</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <div class="d-flex align-center">
                                    @context.Name
                                    @if (context.AutoDetected)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Info" Class="ml-2">Auto</MudChip>
                                    }
                                </div>
                            </MudTd>
                            <MudTd>@context.Price.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudTd>
                            <MudTd>@GetFrequencyLabel(context.BillingFrequency)</MudTd>
                            <MudTd>@(context.NextBillingDate?.ToString("yyyy-MM-dd") ?? "-")</MudTd>
                            <MudTd>
                                @if (IsUnused(context))
                                {
                                    var daysUnused = context.LastUsedDate.HasValue 
                                        ? (DateTime.UtcNow - context.LastUsedDate.Value).Days 
                                        : -1;
                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.Warning">
                                        @if (daysUnused > 0)
                                        {
                                            <text>@daysUnused d sedan</text>
                                        }
                                        else
                                        {
                                            <text>Aldrig anv√§nd</text>
                                        }
                                    </MudChip>
                                }
                                else if (context.CancellationDeadline.HasValue && context.CancellationDeadline.Value <= DateTime.UtcNow.AddDays(30))
                                {
                                    var daysLeft = (context.CancellationDeadline.Value - DateTime.UtcNow).Days;
                                    <MudChip T="string" Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Alarm">
                                        Frist: @daysLeft d
                                    </MudChip>
                                }
                                else if (context.Category != null)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Default" Style="@($"background-color: {context.Category.Color}; color: white;")">
                                        @context.Category.Name
                                    </MudChip>
                                }
                            </MudTd>
                            <MudTd>
                                @if (!string.IsNullOrWhiteSpace(context.SharedWith))
                                {
                                    <MudTooltip Text="@context.SharedWith">
                                        <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Group">
                                            Delad
                                        </MudChip>
                                    </MudTooltip>
                                }
                            </MudTd>
                            <MudTd>
                                @if (!string.IsNullOrEmpty(context.CancellationUrl))
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Color="Color.Error" 
                                                   Href="@context.CancellationUrl" Target="_blank" Title="S√§g upp" />
                                }
                                @if (!string.IsNullOrEmpty(context.ManagementUrl))
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Color="Color.Info" 
                                                   Href="@context.ManagementUrl" Target="_blank" Title="Hantera" />
                                }
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary" 
                                               OnClick="@(() => EditSubscription(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" 
                                               OnClick="@(() => DeleteSubscription(context))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Inga aktiva abonnemang.</MudText>
                }
            </MudPaper>
        </MudTabPanel>
        <MudTabPanel Text="Inaktiva" Icon="@Icons.Material.Filled.Cancel">
            <MudPaper Class="pa-4">
                @if (_inactiveSubscriptions.Any())
                {
                    <MudTable Items="_inactiveSubscriptions" Hover="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Namn</MudTh>
                            <MudTh>Pris</MudTh>
                            <MudTh>Frekvens</MudTh>
                            <MudTh>Startdatum</MudTh>
                            <MudTh>Slutdatum</MudTh>
                            <MudTh>√Ötg√§rder</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Name</MudTd>
                            <MudTd>@context.Price.ToString("C", new System.Globalization.CultureInfo("sv-SE"))</MudTd>
                            <MudTd>@GetFrequencyLabel(context.BillingFrequency)</MudTd>
                            <MudTd>@context.StartDate.ToString("yyyy-MM-dd")</MudTd>
                            <MudTd>@(context.EndDate?.ToString("yyyy-MM-dd") ?? "-")</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Primary" 
                                               OnClick="@(() => EditSubscription(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" 
                                               OnClick="@(() => DeleteSubscription(context))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Inga inaktiva abonnemang.</MudText>
                }
            </MudPaper>
        </MudTabPanel>
    </MudTabs>
}

@code {
    private bool _loading = true;
    private bool _showCreateForm = false;
    private List<Subscription> _subscriptions = new();
    private List<Subscription> _activeSubscriptions = new();
    private List<Subscription> _inactiveSubscriptions = new();
    private List<Subscription> _unusedSubscriptions = new();
    private List<Subscription> _upcomingDeadlines = new();
    private List<Category> _categories = new();
    private Subscription _formSubscription = new();
    private Subscription? _editingSubscription = null;
    private DateTime? _formStartDate;
    private DateTime? _formNextBillingDate;
    private DateTime? _formCancellationDeadline;
    private DateTime? _formLastUsedDate;
    private string _userId = string.Empty;
    private int _activeCount = 0;
    private decimal _monthlyCost = 0;
    private decimal _yearlyCost = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
        
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        _subscriptions = await SubscriptionService.GetSubscriptionsAsync(_userId);
        _activeSubscriptions = _subscriptions.Where(s => s.IsActive).ToList();
        _inactiveSubscriptions = _subscriptions.Where(s => !s.IsActive).ToList();
        _activeCount = _activeSubscriptions.Count;
        _monthlyCost = await SubscriptionService.GetMonthlySubscriptionCostAsync(_userId);
        _yearlyCost = await SubscriptionService.GetYearlySubscriptionCostAsync(_userId);
        _categories = (await CategoryService.GetAllCategoriesAsync()).ToList();
        
        // Load smart features data
        _unusedSubscriptions = await SubscriptionService.GetUnusedSubscriptionsAsync(_userId, 45);
        _upcomingDeadlines = await SubscriptionService.GetSubscriptionsWithUpcomingCancellationDeadlineAsync(_userId, 30);
        
        _loading = false;
    }

    private void ToggleCreateForm()
    {
        _showCreateForm = !_showCreateForm;
        if (_showCreateForm)
        {
            _formSubscription = new Subscription 
            { 
                UserId = _userId, 
                BillingFrequency = "Monthly",
                IsActive = true,
                Currency = "SEK"
            };
            _formStartDate = DateTime.Today;
            _formNextBillingDate = null;
            _formCancellationDeadline = null;
            _formLastUsedDate = null;
            _editingSubscription = null;
        }
    }

    private void EditSubscription(Subscription subscription)
    {
        _editingSubscription = subscription;
        _formSubscription = new Subscription
        {
            SubscriptionId = subscription.SubscriptionId,
            UserId = subscription.UserId,
            Name = subscription.Name,
            Description = subscription.Description,
            Price = subscription.Price,
            Currency = subscription.Currency,
            BillingFrequency = subscription.BillingFrequency,
            StartDate = subscription.StartDate,
            EndDate = subscription.EndDate,
            NextBillingDate = subscription.NextBillingDate,
            IsActive = subscription.IsActive,
            CategoryId = subscription.CategoryId,
            CancellationUrl = subscription.CancellationUrl,
            ManagementUrl = subscription.ManagementUrl,
            AccountEmail = subscription.AccountEmail,
            Notes = subscription.Notes,
            CancellationDeadline = subscription.CancellationDeadline,
            CancellationNoticeDays = subscription.CancellationNoticeDays,
            LastUsedDate = subscription.LastUsedDate,
            SharedWith = subscription.SharedWith,
            AutoDetected = subscription.AutoDetected,
            DetectedFromTransactionId = subscription.DetectedFromTransactionId
        };
        _formStartDate = subscription.StartDate;
        _formNextBillingDate = subscription.NextBillingDate;
        _formCancellationDeadline = subscription.CancellationDeadline;
        _formLastUsedDate = subscription.LastUsedDate;
        _showCreateForm = true;
    }

    private async Task SaveSubscription()
    {
        if (string.IsNullOrWhiteSpace(_formSubscription.Name))
        {
            Snackbar.Add("Namn √§r obligatoriskt", Severity.Error);
            return;
        }

        _formSubscription.StartDate = _formStartDate ?? DateTime.Today;
        _formSubscription.NextBillingDate = _formNextBillingDate;
        _formSubscription.CancellationDeadline = _formCancellationDeadline;
        _formSubscription.LastUsedDate = _formLastUsedDate;

        try
        {
            if (_editingSubscription != null)
            {
                await SubscriptionService.UpdateSubscriptionAsync(_formSubscription);
                Snackbar.Add("Abonnemang uppdaterat!", Severity.Success);
            }
            else
            {
                await SubscriptionService.CreateSubscriptionAsync(_formSubscription);
                Snackbar.Add("Abonnemang skapat!", Severity.Success);
            }

            _showCreateForm = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fel: {ex.Message}", Severity.Error);
        }
    }

    private void CancelForm()
    {
        _showCreateForm = false;
        _editingSubscription = null;
    }

    private async Task DeleteSubscription(Subscription subscription)
    {
        bool? confirm = await DialogService.ShowMessageBox(
            "Bekr√§fta borttagning",
            $"√Ñr du s√§ker p√• att du vill ta bort abonnemanget '{subscription.Name}'?",
            yesText: "Ta bort", cancelText: "Avbryt");

        if (confirm == true)
        {
            try
            {
                await SubscriptionService.DeleteSubscriptionAsync(subscription.SubscriptionId, _userId);
                Snackbar.Add("Abonnemang borttaget", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Fel: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DetectSubscriptions()
    {
        try
        {
            _loading = true;
            var detected = await SubscriptionService.DetectSubscriptionsFromTransactionsAsync(_userId);
            
            if (detected.Any())
            {
                var parameters = new DialogParameters
                {
                    { "Subscriptions", detected }
                };
                
                var dialog = await DialogService.ShowAsync<ConfirmDetectedSubscriptionsDialog>("Uppt√§ckta Abonnemang", parameters);
                var result = await dialog.Result;
                
                if (!result.Canceled && result.Data is List<Subscription> confirmed)
                {
                    foreach (var sub in confirmed)
                    {
                        await SubscriptionService.CreateSubscriptionAsync(sub);
                    }
                    Snackbar.Add($"Lade till {confirmed.Count} uppt√§ckta abonnemang!", Severity.Success);
                    await LoadData();
                }
            }
            else
            {
                Snackbar.Add("Inga nya abonnemang uppt√§cktes", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fel vid uppt√§ckt: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task MarkAsUsed(Subscription subscription)
    {
        try
        {
            await SubscriptionService.UpdateLastUsedDateAsync(subscription.SubscriptionId, DateTime.UtcNow);
            Snackbar.Add($"{subscription.Name} markerad som anv√§nd!", Severity.Success);
            await LoadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fel: {ex.Message}", Severity.Error);
        }
    }

    private bool IsUnused(Subscription subscription)
    {
        if (subscription.LastUsedDate == null)
            return true;
        
        var daysSinceUse = (DateTime.UtcNow - subscription.LastUsedDate.Value).Days;
        return daysSinceUse >= 45;
    }

    private string GetFrequencyLabel(string frequency)
    {
        return frequency switch
        {
            "Monthly" => "M√•nadsvis",
            "Yearly" => "√Örligen",
            "Quarterly" => "Kvartalsvis",
            _ => frequency
        };
    }
}
