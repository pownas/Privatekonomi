@using Privatekonomi.Core.Services
@using Privatekonomi.Core.Models
@inject IReportService ReportService
@inject ISnackbar Snackbar

<WidgetBase Title="Nettoförmögenhet" Configuration="@Configuration" ShowHeader="true">
    <ChildContent>
        @if (_loading)
        {
            <div class="d-flex justify-center align-center" style="min-height: 200px;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (_netWorthReport != null)
        {
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudText Typo="Typo.h4" Color="@GetNetWorthColor()">
                        @_netWorthReport.NetWorth.ToString("C0", new System.Globalization.CultureInfo("sv-SE"))
                    </MudText>
                    <MudText Typo="Typo.body2" Color="@GetChangeColor()" Class="mt-2">
                        @_netWorthReport.PercentageChange.ToString("+0.00%;-0.00%;0%")
                        <MudIcon Icon="@GetChangeIcon()" Size="Size.Small" />
                    </MudText>
                    
                    <MudGrid Class="mt-4">
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2" Color="Color.Success">
                                Tillgångar: @_netWorthReport.TotalAssets.ToString("C0", new System.Globalization.CultureInfo("sv-SE"))
                            </MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2" Color="Color.Error">
                                Skulder: @_netWorthReport.TotalLiabilities.ToString("C0", new System.Globalization.CultureInfo("sv-SE"))
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                
                <MudItem xs="12" md="8">
                    @if (_netWorthReport.History.Any())
                    {
                        <MudChart ChartType="ChartType.Line" 
                                  ChartSeries="@_netWorthSeries" 
                                  XAxisLabels="@_netWorthLabels"
                                  Width="100%" 
                                  Height="200px"
                                  ChartOptions="@_chartOptions" />
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Ingen historisk data tillgänglig ännu.
                        </MudText>
                    }
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Kunde inte ladda nettoförmögenhetsdata.
            </MudText>
        }
    </ChildContent>
</WidgetBase>

@code {
    [Parameter]
    public WidgetConfiguration? Configuration { get; set; }

    private bool _loading = true;
    private NetWorthReport? _netWorthReport = null;
    private List<ChartSeries> _netWorthSeries = new();
    private string[] _netWorthLabels = Array.Empty<string>();
    private ChartOptions _chartOptions = new ChartOptions
    {
        YAxisTicks = 1000,
        YAxisFormat = "C0"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        try
        {
            _netWorthReport = await ReportService.GetNetWorthReportAsync();
            
            if (_netWorthReport?.History != null && _netWorthReport.History.Any())
            {
                var culture = new System.Globalization.CultureInfo("sv-SE");
                _netWorthLabels = _netWorthReport.History
                    .Select(h => h.Date.ToString("MMM yyyy", culture))
                    .ToArray();
                
                _netWorthSeries = new List<ChartSeries>
                {
                    new ChartSeries
                    {
                        Name = "Nettoförmögenhet",
                        Data = _netWorthReport.History.Select(h => (double)h.NetWorth).ToArray()
                    }
                };
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Kunde inte ladda nettoförmögenhet: {ex.Message}", Severity.Warning);
        }
        finally
        {
            _loading = false;
        }
    }

    private Color GetNetWorthColor()
    {
        if (_netWorthReport == null) return Color.Default;
        return _netWorthReport.NetWorth >= 0 ? Color.Success : Color.Error;
    }

    private Color GetChangeColor()
    {
        if (_netWorthReport == null) return Color.Default;
        if (_netWorthReport.PercentageChange > 0) return Color.Success;
        if (_netWorthReport.PercentageChange < 0) return Color.Error;
        return Color.Default;
    }

    private string GetChangeIcon()
    {
        if (_netWorthReport == null) return Icons.Material.Filled.Remove;
        if (_netWorthReport.PercentageChange > 0) return Icons.Material.Filled.TrendingUp;
        if (_netWorthReport.PercentageChange < 0) return Icons.Material.Filled.TrendingDown;
        return Icons.Material.Filled.Remove;
    }
}
