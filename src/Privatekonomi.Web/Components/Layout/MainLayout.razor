@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Options
@using Microsoft.Extensions.DependencyInjection
@using Privatekonomi.Core.Configuration
@using Privatekonomi.Core.Services.Persistence
@using Privatekonomi.Core.Data
@using Privatekonomi.Web.Components.Dialogs
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IOptions<StorageSettings> StorageSettings
@inject IServiceProvider ServiceProvider
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@implements IDisposable

<MudThemeProvider @ref="@_mudThemeProvider" Theme="@_theme" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="2">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h5" Class="ml-3" Style="font-weight: 600;">Privatekonomi</MudText>
        <MudSpacer />
        @if (IsJsonFileStorage)
        {
            <MudTooltip Text="Spara data till JSON-filer">
                <MudIconButton Icon="@Icons.Material.Filled.Save" 
                               Color="Color.Inherit" 
                               OnClick="@SaveJsonData"
                               Disabled="@_isSaving"
                               aria-label="Spara JSON-data" />
            </MudTooltip>
        }
        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.body2" Class="mr-2">@context.User.Identity?.Name</MudText>
                <MudButton Href="/Account/Logout" Color="Color.Inherit" StartIcon="@Icons.Material.Filled.Logout">Logga ut</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/Account/Login" Color="Color.Inherit" StartIcon="@Icons.Material.Filled.Login">Logga in</MudButton>
            </NotAuthorized>
        </AuthorizeView>
        <MudTooltip Text="Tangentbordsgenvägar (Ctrl + /)">
            <MudIconButton Icon="@Icons.Material.Filled.Keyboard" 
                           Color="Color.Inherit" 
                           OnClick="@ShowKeyboardShortcuts"
                           aria-label="Tangentbordsgenvägar" />
        </MudTooltip>
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" 
                       Color="Color.Inherit" 
                       OnClick="@ToggleTheme" 
                       aria-label="@(_isDarkMode ? "Ljust läge" : "Mörkt läge")" />
    </MudAppBar>
    
    <MudDrawer @bind-Open="@_drawerOpen" 
               ClipMode="DrawerClipMode.Always" 
               Elevation="3"
               Breakpoint="Breakpoint.Md"
               Variant="@DrawerVariant.Responsive">
        <NavMenu />
    </MudDrawer>
    
    <MudMainContent Class="pa-3 pa-md-6">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private bool _isSaving = false;
    private MudThemeProvider? _mudThemeProvider;
    private MudTheme _theme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#6366F1",          // Modern indigo
            Secondary = "#EC4899",         // Vibrant pink
            Tertiary = "#8B5CF6",         // Purple accent
            AppbarBackground = "#6366F1",
            Success = "#10B981",          // Fresh green
            Info = "#3B82F6",             // Bright blue
            Warning = "#F59E0B",          // Warm orange
            Error = "#EF4444",            // Clear red
            Dark = "#1F2937",             // Deep gray
            Background = "#F9FAFB",       // Subtle off-white
            BackgroundGray = "#F3F4F6",   // Light gray
            Surface = "#FFFFFF",
            DrawerBackground = "#FFFFFF",
            AppbarText = "#FFFFFF",
            TextPrimary = "#111827",      // Rich black
            TextSecondary = "#6B7280",    // Medium gray
            ActionDefault = "#111827",
            Divider = "#E5E7EB",
            DividerLight = "#F3F4F6",
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#818CF8",          // Lighter indigo for dark mode
            Secondary = "#F472B6",         // Lighter pink
            Tertiary = "#A78BFA",         // Lighter purple
            AppbarBackground = "#1F2937",
            AppbarText = "rgba(255,255,255, 0.95)",
            Background = "#111827",       // Deep dark
            BackgroundGray = "#1F2937",   // Slightly lighter dark
            Surface = "#1F2937",
            DrawerBackground = "#1F2937",
            DrawerText = "rgba(255,255,255, 0.95)",
            DrawerIcon = "rgba(255,255,255, 0.95)",
            Success = "#34D399",          // Lighter green
            Info = "#60A5FA",             // Lighter blue
            Warning = "#FBBF24",          // Lighter orange
            Error = "#F87171",            // Lighter red
            TextPrimary = "rgba(255,255,255, 0.95)",
            TextSecondary = "rgba(255,255,255, 0.65)",
            ActionDefault = "rgba(255,255,255, 0.95)",
            ActionDisabled = "rgba(255,255,255, 0.3)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Divider = "rgba(255,255,255, 0.12)",
            DividerLight = "rgba(255,255,255, 0.06)",
            TableLines = "rgba(255,255,255, 0.12)",
            LinesDefault = "rgba(255,255,255, 0.12)",
            LinesInputs = "rgba(255,255,255, 0.35)",
            TextDisabled = "rgba(255,255,255, 0.38)",
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "8px",
            DrawerWidthLeft = "280px",
            DrawerWidthRight = "280px",
            AppbarHeight = "64px"
        }
    };

    private bool IsJsonFileStorage => 
        StorageSettings.Value.Provider.Equals("JsonFile", StringComparison.OrdinalIgnoreCase);

    private async Task SaveJsonData()
    {
        if (!IsJsonFileStorage)
        {
            return;
        }

        _isSaving = true;
        StateHasChanged();

        try
        {
            using var scope = ServiceProvider.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<PrivatekonomyContext>();
            var persistenceService = scope.ServiceProvider.GetService<IDataPersistenceService>();

            if (persistenceService != null)
            {
                await persistenceService.SaveAsync(context);
                Snackbar.Add("Data sparad till JSON-filer", Severity.Success);
            }
            else
            {
                Snackbar.Add("Kunde inte hitta persistence service", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fel vid sparande: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            try
            {
                // Get the initial theme that was already applied in the head script
                _isDarkMode = await JSRuntime.InvokeAsync<bool>("themeManager.getInitialTheme");
                
                // If no saved preference exists, save the system preference
                var hasSavedPreference = await JSRuntime.InvokeAsync<bool>("themeManager.hasPreference");
                if (!hasSavedPreference)
                {
                    await JSRuntime.InvokeVoidAsync("themeManager.setTheme", _isDarkMode);
                }
                
                ThemeService.IsDarkMode = _isDarkMode;
                
                // Initialize keyboard shortcuts
                var objRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("keyboardShortcuts.init", objRef);
                
                StateHasChanged();
            }
            catch
            {
                // Ignore JS interop errors on first render
            }
        }
    }

    protected override void OnInitialized()
    {
        _isDarkMode = ThemeService.IsDarkMode;
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        ThemeService.IsDarkMode = _isDarkMode;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("themeManager.setTheme", _isDarkMode);
        }
        catch
        {
            // Ignore JS interop errors
        }
    }
    
    private void OnThemeChanged()
    {
        _isDarkMode = ThemeService.IsDarkMode;
        StateHasChanged();
    }
    
    private async Task ShowKeyboardShortcuts()
    {
        await DialogService.ShowAsync<KeyboardShortcutsDialog>("Tangentbordsgenvägar", 
            new DialogOptions { MaxWidth = MaxWidth.Small });
    }
    
    [JSInvokable]
    public async Task ShowKeyboardShortcutsHelp()
    {
        await ShowKeyboardShortcuts();
    }
    
    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}
