@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<MudThemeProvider @ref="@_mudThemeProvider" Theme="@_theme" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h5" Class="ml-3">Privatekonomi</MudText>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.body2" Class="mr-2">@context.User.Identity?.Name</MudText>
                <MudButton Href="/Account/Logout" Color="Color.Inherit" StartIcon="@Icons.Material.Filled.Logout">Logga ut</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/Account/Login" Color="Color.Inherit" StartIcon="@Icons.Material.Filled.Login">Logga in</MudButton>
            </NotAuthorized>
        </AuthorizeView>
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" 
                       Color="Color.Inherit" 
                       OnClick="@ToggleTheme" 
                       aria-label="@(_isDarkMode ? "Ljust läge" : "Mörkt läge")" />
    </MudAppBar>
    
    <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    
    <MudMainContent Class="pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudThemeProvider? _mudThemeProvider;
    private MudTheme _theme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#594AE2",
            Secondary = "#FF4081",
            AppbarBackground = "#594AE2",
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#776BE7",
            Secondary = "#FF4081",
            AppbarBackground = "#27272f",
            AppbarText = "rgba(255,255,255, 0.87)",
            Background = "#1a1a1f",
            BackgroundGray = "#27272f",
            Surface = "#27272f",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(255,255,255, 0.87)",
            DrawerIcon = "rgba(255,255,255, 0.87)",
            TextPrimary = "rgba(255,255,255, 0.87)",
            TextSecondary = "rgba(255,255,255, 0.60)",
            ActionDefault = "rgba(255,255,255, 0.87)",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Divider = "rgba(255,255,255, 0.12)",
            DividerLight = "rgba(255,255,255, 0.06)",
            TableLines = "rgba(255,255,255, 0.12)",
            LinesDefault = "rgba(255,255,255, 0.12)",
            LinesInputs = "rgba(255,255,255, 0.3)",
            TextDisabled = "rgba(255,255,255, 0.38)",
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            try
            {
                // Check if user has a saved preference
                var hasSavedPreference = await JSRuntime.InvokeAsync<bool>("themeManager.hasPreference");
                
                if (hasSavedPreference)
                {
                    // Use saved preference
                    _isDarkMode = await JSRuntime.InvokeAsync<bool>("themeManager.getTheme");
                }
                else
                {
                    // Use system preference if no saved preference
                    _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
                    // Save the system preference
                    await JSRuntime.InvokeVoidAsync("themeManager.setTheme", _isDarkMode);
                }
                
                ThemeService.IsDarkMode = _isDarkMode;
                StateHasChanged();
            }
            catch
            {
                // Ignore JS interop errors on first render
            }
        }
    }

    protected override void OnInitialized()
    {
        _isDarkMode = ThemeService.IsDarkMode;
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private async Task ToggleTheme()
    {
        ThemeService.ToggleTheme();
        try
        {
            await JSRuntime.InvokeVoidAsync("themeManager.setTheme", ThemeService.IsDarkMode);
        }
        catch
        {
            // Ignore JS interop errors
        }
    }
    
    private void OnThemeChanged()
    {
        _isDarkMode = ThemeService.IsDarkMode;
        StateHasChanged();
    }
    
    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}
