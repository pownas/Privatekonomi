@using Privatekonomi.Core.Models
@using Privatekonomi.Core.Services
@inject ITransactionService TransactionService
@inject ICategoryService CategoryService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        @if (_transaction != null)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_transaction.Description" Label="Beskrivning" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="_transactionDate" Label="Datum" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField @bind-Value="_transaction.Amount" Label="Belopp" Variant="Variant.Outlined" Format="N2" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Kategori</MudText>
                    @if (_availableCategories != null && _availableCategories.Any())
                    {
                        <MudSelect @bind-Value="_selectedCategoryId" Label="Välj kategori" Variant="Variant.Outlined" 
                                   T="int?" Clearable="true" HelperText="Välj en kategori för transaktionen">
                            @foreach (var category in _availableCategories)
                            {
                                <MudSelectItem T="int?" Value="@category.CategoryId">
                                    <div style="display: flex; align-items: center;">
                                        <div style="width: 16px; height: 16px; border-radius: 50%; background-color: @category.Color; margin-right: 8px;"></div>
                                        @category.Name
                                    </div>
                                </MudSelectItem>
                            }
                        </MudSelect>
                        @if (_selectedCategoryId.HasValue)
                        {
                            var selectedCat = _availableCategories.FirstOrDefault(c => c.CategoryId == _selectedCategoryId.Value);
                            if (selectedCat != null)
                            {
                                <MudChip T="string" Size="Size.Small" 
                                         Style="@($"background-color: {selectedCat.Color}; color: white; margin-top: 8px;")" 
                                         OnClose="() => _selectedCategoryId = null">
                                    @selectedCat.Name
                                </MudChip>
                            }
                        }
                    }
                    else
                    {
                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                    }
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_transaction.Tags" Label="Taggar (kommaseparerade)" 
                                  Variant="Variant.Outlined" 
                                  HelperText="Exempel: mat, shopping, nödvändigt" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_transaction.Notes" Label="Noteringar" 
                                  Variant="Variant.Outlined" 
                                  Lines="4"
                                  HelperText="Lägg till anteckningar eller kommentarer om transaktionen" />
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Avbryt</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Spara</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    public required IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Transaction Transaction { get; set; } = null!;

    private Transaction _transaction = null!;
    private DateTime? _transactionDate;
    private IEnumerable<Category> _availableCategories = new List<Category>();
    private int? _selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        // Load all available categories
        _availableCategories = await CategoryService.GetAllCategoriesAsync();
        
        // Create a copy to avoid modifying the original until saved
        _transaction = new Transaction
        {
            TransactionId = Transaction.TransactionId,
            Description = Transaction.Description,
            Amount = Transaction.Amount,
            Date = Transaction.Date,
            IsIncome = Transaction.IsIncome,
            BankSourceId = Transaction.BankSourceId,
            Currency = Transaction.Currency,
            Payee = Transaction.Payee,
            Tags = Transaction.Tags,
            Notes = Transaction.Notes,
            RecurringId = Transaction.RecurringId,
            Imported = Transaction.Imported,
            ImportSource = Transaction.ImportSource,
            Cleared = Transaction.Cleared,
            CreatedAt = Transaction.CreatedAt,
            UpdatedAt = Transaction.UpdatedAt
        };
        _transactionDate = _transaction.Date;
        
        // Set the currently selected category if exists
        if (Transaction.TransactionCategories.Any())
        {
            _selectedCategoryId = Transaction.TransactionCategories.First().CategoryId;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Save()
    {
        try
        {
            if (_transactionDate.HasValue)
            {
                _transaction.Date = _transactionDate.Value;
            }
            
            _transaction.UpdatedAt = DateTime.UtcNow;
            
            await TransactionService.UpdateTransactionAsync(_transaction);
            
            // Update categories if changed
            if (_selectedCategoryId.HasValue)
            {
                var newCategories = new List<TransactionCategory>
                {
                    new TransactionCategory
                    {
                        TransactionId = _transaction.TransactionId,
                        CategoryId = _selectedCategoryId.Value,
                        Amount = _transaction.Amount,
                        Percentage = 100
                    }
                };
                await TransactionService.UpdateTransactionCategoriesAsync(_transaction.TransactionId, newCategories);
            }
            else
            {
                // Clear all categories if none selected
                await TransactionService.UpdateTransactionCategoriesAsync(_transaction.TransactionId, new List<TransactionCategory>());
            }
            
            Snackbar.Add("Transaktionen har uppdaterats", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ett fel uppstod: {ex.Message}", Severity.Error);
        }
    }
}
