@using Privatekonomi.Core.Services
@using Privatekonomi.Core.Models
@inject IDashboardLayoutService LayoutService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Hantera Dashboard-layouter</MudText>
        
        @if (_loading)
        {
            <div class="d-flex justify-center align-center pa-6">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else
        {
            <MudList T="string">
                @foreach (var dashboardLayout in _layouts)
                {
                    <MudListItem T="string">
                        <div class="d-flex justify-space-between align-center">
                            <div class="d-flex align-center gap-2">
                                @if (dashboardLayout.IsDefault)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Small" />
                                }
                                <MudText>@dashboardLayout.Name</MudText>
                                <MudChip T="string" Size="Size.Small" Color="Color.Info">
                                    @dashboardLayout.Widgets.Count widgets
                                </MudChip>
                            </div>
                            <div class="d-flex gap-1">
                                @if (!dashboardLayout.IsDefault)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Star" 
                                                   Size="Size.Small"
                                                   Color="Color.Default"
                                                   OnClick="@(() => SetAsDefault(dashboardLayout.LayoutId))"
                                                   Title="Sätt som standard" />
                                }
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                               Size="Size.Small"
                                               Color="Color.Primary"
                                               OnClick="@(() => SelectLayout(dashboardLayout))"
                                               Title="Välj layout" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Size="Size.Small"
                                               Color="Color.Error"
                                               OnClick="@(() => DeleteLayout(dashboardLayout.LayoutId))"
                                               Disabled="@dashboardLayout.IsDefault"
                                               Title="Ta bort" />
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
            
            <MudDivider Class="my-3" />
            
            <MudTextField @bind-Value="_newLayoutName" 
                          Label="Nytt layoutnamn" 
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Class="mb-2" />
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary"
                       OnClick="CreateNewLayout"
                       FullWidth="true"
                       Disabled="@string.IsNullOrWhiteSpace(_newLayoutName)">
                Skapa ny layout
            </MudButton>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Stäng</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public string UserId { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<DashboardLayout> OnLayoutSelected { get; set; }

    private bool _loading = true;
    private List<DashboardLayout> _layouts = new();
    private string _newLayoutName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadLayouts();
    }

    private async Task LoadLayouts()
    {
        _loading = true;
        try
        {
            var layouts = await LayoutService.GetUserLayoutsAsync(UserId);
            _layouts = layouts.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Kunde inte ladda layouter: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task SetAsDefault(int layoutId)
    {
        try
        {
            await LayoutService.SetDefaultLayoutAsync(layoutId, UserId);
            Snackbar.Add("Standardlayout uppdaterad", Severity.Success);
            await LoadLayouts();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Kunde inte uppdatera standardlayout: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteLayout(int layoutId)
    {
        try
        {
            await LayoutService.DeleteLayoutAsync(layoutId);
            Snackbar.Add("Layout borttagen", Severity.Success);
            await LoadLayouts();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Kunde inte ta bort layout: {ex.Message}", Severity.Error);
        }
    }

    private async Task CreateNewLayout()
    {
        try
        {
            var newLayout = new DashboardLayout
            {
                Name = _newLayoutName,
                UserId = UserId,
                IsDefault = false,
                Widgets = new List<WidgetConfiguration>()
            };

            await LayoutService.CreateLayoutAsync(newLayout);
            Snackbar.Add($"Layout '{_newLayoutName}' skapad", Severity.Success);
            _newLayoutName = string.Empty;
            await LoadLayouts();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Kunde inte skapa layout: {ex.Message}", Severity.Error);
        }
    }

    private async Task SelectLayout(DashboardLayout dashboardLayout)
    {
        if (OnLayoutSelected.HasDelegate)
        {
            await OnLayoutSelected.InvokeAsync(dashboardLayout);
        }
        MudDialog.Close(DialogResult.Ok(dashboardLayout));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
