@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Redigera bankkoppling</MudText>
        <MudForm @ref="_form" @bind-IsValid="@_formValid">
            <MudTextField @bind-Value="Connection.ExternalAccountId" Label="Konto-ID" 
                          HelperText="ID från bankens API" ReadOnly="true" />
            
            <MudSwitch @bind-Value="Connection.AutoSyncEnabled" Label="Automatisk synkronisering" Color="Color.Primary" />
            
            <MudSelect @bind-Value="Connection.Status" Label="Status" Required="true">
                <MudSelectItem Value="@("Active")">Aktiv</MudSelectItem>
                <MudSelectItem Value="@("Expired")">Utgången</MudSelectItem>
                <MudSelectItem Value="@("Error")">Fel</MudSelectItem>
            </MudSelect>
            
            <MudAlert Severity="Severity.Info" Class="mt-4">
                Om kopplingen har utgått behöver du godkänna åtkomst på nytt hos banken.
            </MudAlert>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Avbryt</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_formValid)">
            Spara
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }

    [Parameter] 
    public BankConnection Connection { get; set; } = new();

    private MudForm? _form;
    private bool _formValid;

    private void Submit()
    {
        MudDialog.Close(DialogResult.Ok(Connection));
    }

    private void Cancel() => MudDialog.Cancel();

    // Simplified BankConnection DTO for dialog
    public class BankConnection
    {
        public int BankConnectionId { get; set; }
        public string? ExternalAccountId { get; set; }
        public bool AutoSyncEnabled { get; set; }
        public string Status { get; set; } = "Active";
    }
}
