@namespace Privatekonomi.Web.Components.Shared
@inject IJSRuntime JSRuntime

<div class="bottom-sheet-backdrop @(_isOpen ? "open" : "")" @onclick="Close"></div>
<div class="bottom-sheet @(_isOpen ? "open" : "")" @ref="_sheetElement">
    <div class="bottom-sheet-handle"></div>
    <div class="pa-4">
        @if (!string.IsNullOrEmpty(Title))
        {
            <MudText Typo="Typo.h6" Class="mb-3">@Title</MudText>
        }
        @ChildContent
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    private bool _isOpen;
    private ElementReference _sheetElement;

    protected override void OnParametersSet()
    {
        if (_isOpen != IsOpen)
        {
            _isOpen = IsOpen;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        _isOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }

    public async Task Open()
    {
        _isOpen = true;
        await IsOpenChanged.InvokeAsync(true);
    }
}
